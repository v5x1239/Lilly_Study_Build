--CLINICALDATA

-- this view selects the most current rev of each root control

CREATE OR REPLACE VIEW IRV_CUR_ROOT_CONTROLDATA
AS
SELECT 
       CONTROLVALUEID,
       VALUEORDER,
       CONTEXTID,
       AUDITORDER,
       CONTROLID,
       FORMID,ITEMSETINDEX
FROM RT_CONTROLDATA CR
WHERE CR.PARENTCONTROLVALUEID = 0;

-- this view selects only children from controldata

CREATE OR REPLACE VIEW IRV_CUR_CHILD_CONTROLDATA
AS
SELECT 
       CONTROLVALUEID,
       VALUEORDER,
       CONTEXTID,
       AUDITORDER,
       CONTROLID,
       PARENTCONTROLVALUEID, PARENTVALUEORDER
FROM RT_CONTROLDATA CR
WHERE CR.PARENTCONTROLVALUEID != 0;

-- this view joins each root controldata all the way out to each of its leaf nodes

CREATE OR REPLACE VIEW IRV_CUR_ROOT_CHILD_CONTROLDATA
AS
SELECT CD.CONTEXTID,
       CD.FORMID,
       CD.AUDITORDER,
       CD.CONTROLVALUEID  AS CVID0, 
       CD.VALUEORDER      AS CVID0_ORDER,
       CD.CONTROLID       AS CID0, 
       CD1.CONTROLVALUEID AS CVID1, 
       CD1.VALUEORDER     AS CVID1_ORDER,
       CD1.CONTROLID      AS CID1, 
       CD2.CONTROLVALUEID AS CVID2, 
       CD2.VALUEORDER     AS CVID2_ORDER,
       CD2.CONTROLID      AS CID2, 
       CD3.CONTROLVALUEID AS CVID3, 
       CD3.VALUEORDER     AS CVID3_ORDER,
       CD3.CONTROLID      AS CID3, 
       CD4.CONTROLVALUEID AS CVID4, 
       CD4.VALUEORDER     AS CVID4_ORDER,
       CD4.CONTROLID      AS CID4 
FROM IRV_CUR_ROOT_CONTROLDATA CD, 
     IRV_CUR_CHILD_CONTROLDATA CD1, 
     IRV_CUR_CHILD_CONTROLDATA CD2, 
     IRV_CUR_CHILD_CONTROLDATA CD3, 
     IRV_CUR_CHILD_CONTROLDATA CD4 
WHERE CD.CONTROLVALUEID = CD1.PARENTCONTROLVALUEID (+)
AND CD.VALUEORDER = CD1.PARENTVALUEORDER (+) 
AND CD1.CONTROLVALUEID = CD2.PARENTCONTROLVALUEID (+) 
AND CD1.VALUEORDER = CD2.PARENTVALUEORDER (+) 
AND CD2.CONTROLVALUEID = CD3.PARENTCONTROLVALUEID (+) 
AND CD2.VALUEORDER = CD3.PARENTVALUEORDER (+) 
AND CD3.CONTROLVALUEID = CD4.PARENTCONTROLVALUEID (+) 
AND CD3.VALUEORDER = CD4.PARENTVALUEORDER (+);

-- this view rolls up from the leafs back up to the parent and generates the connecting nodes between them
--
-- by leaving out 0 from the rollup it saves us from having to rollup to null and then filter out nulls later

CREATE OR REPLACE VIEW IRV_CUR_ROOT_CHILD_CTRLDATA_R
AS
SELECT DISTINCT CONTEXTID, FORMID,
              CVID0, CVID0_ORDER, CID0, 
              CVID1, CVID1_ORDER, CID1, 
              CVID2, CVID2_ORDER, CID2, 
              CVID3, CVID3_ORDER, CID3, 
              CVID4, CVID4_ORDER, CID4
FROM IRV_CUR_ROOT_CHILD_CONTROLDATA
GROUP BY CONTEXTID,FORMID,
         (CVID0, CVID0_ORDER, CID0),
         ROLLUP ((CVID1, CVID1_ORDER, CID1), 
                 (CVID2, CVID2_ORDER, CID2), 
                 (CVID3, CVID3_ORDER, CID3), 
                 (CVID4, CVID4_ORDER, CID4));


--SYSCONFIG

CREATE OR REPLACE VIEW IRV_DIM_SYSTEMVERSION
AS
SELECT VOLUMEID SYSTEMID,
       COUNT(*) AS SYSTEMVERSIONS,
       MIN(VOLUMEEDITIONID) AS MINSYSTEMVERSIONID,
       MAX(VOLUMEEDITIONID) AS MAXSYSTEMVERSIONID
FROM PF_VOLUMEEDITION SV
GROUP BY VOLUMEID;

CREATE OR REPLACE VIEW IRV_SYSTEMVERSIONS
AS
SELECT 
       VE.VOLUMEID AS SYSTEMID,VOLUMEEDITION AS SYSTEMREV,
       DECODE(VOLUMEEDITIONID,MINSYSTEMVERSIONID,1,0) AS FIRSTSYSTEMVERSION,
       DECODE(VOLUMEEDITIONID,MAXSYSTEMVERSIONID,1,0) AS CURRENTSYSTEMVERSION,
       PFTIMESTAMP AS REVTIME,VOLUMETYPE AS SYSTEMTYPE, V.STUDYNAME AS SYSTEMNAME, 
       VOLUMEEDITIONID AS SYSTEMVERSIONID, SPONSORAPPROVALDATE, EDITIONDESCRIPTION AS VERSIONDESCRIPTION, PROTOCOLVERSION AS SYSTEMVERSION
FROM IRV_DIM_SYSTEMVERSION DSV,
     RT_INFORMREP IR,
     PF_VOLUME V, 
     PF_VOLUMEEDITION VE,
     PF_REVISIONHISTORY REV
WHERE DSV.SYSTEMID = V.VOLUMEID
AND DSV.SYSTEMID = IR.SYSTEMID
AND V.VOLUMEID = VE.VOLUMEID
AND DBUID = VE.VOLUMEID 
AND REVISIONNUMBER = VE.VOLUMEEDITION;

CREATE OR REPLACE VIEW IRV_CUR_SYSTEMVERSION
AS
SELECT SYSTEMID, SYSTEMREV,REVTIME, 
       SYSTEMTYPE, SYSTEMNAME, SYSTEMVERSIONID, SPONSORAPPROVALDATE, VERSIONDESCRIPTION, SYSTEMVERSION
FROM IRV_SYSTEMVERSIONS
WHERE CURRENTSYSTEMVERSION = 1;

CREATE OR REPLACE VIEW IRV_CUR_CONFIGTYPE 
AS
SELECT T.THINGTYPEID CONFIGTYPEID, 
       MAX(T.THINGTYPEREVISIONNUMBER) AS CONFIGTYPEREV
FROM PF_THINGTYPE T
WHERE T.TYPEDESCRIPTION = 'System Config'
GROUP BY T.THINGTYPEID;


CREATE OR REPLACE VIEW IRV_CUR_CONFIGTYPE_ATTRIBUTES
AS
SELECT CONFIGTYPEID, CONFIGTYPEREV, ATTRIBUTENAME, 
       CHAPTERID AS VISITID, CHAPTERREVISIONNUMBER AS VISITREV, 
       PAGEID AS FORMID, PAGEREVISIONNUMBER AS FORMREV, 
       SECTIONID, SECTIONREVISIONNUMBER AS SECTIONREV, 
       ITEMID, ITEMREVISIONNUMBER AS ITEMREV, 
       CONTROL1ID, CONTROL1REVISIONNUMBER AS CONTROL1REV, 
       CONTROL2ID, CONTROL2REVISIONNUMBER AS CONTROL2REV, 
       CONTROL3ID, CONTROL3REVISIONNUMBER AS CONTROL3REV, 
       CONTROL4ID, CONTROL4REVISIONNUMBER AS CONTROL4REV, 
       CONTROL5ID, CONTROL5REVISIONNUMBER AS CONTROL5REV
FROM PF_THINGTYPEATTRIBUTE T,
     IRV_CUR_CONFIGTYPE CCT
WHERE T.THINGTYPEID = CCT.CONFIGTYPEID
AND T.THINGTYPEREVISIONNUMBER = CCT.CONFIGTYPEREV;

CREATE OR REPLACE VIEW IRV_CUR_CONFIG_PROPERTIES
AS
SELECT SUBJECTKEYID AS CONFIGID,ATTRIBUTENAME,
       IC.CONTEXTID,
       CCD.CONTROLVALUEID, CCD.VALUEORDER,
       DATATYPE, NUMVALUE, FLOATVALUE, STRVALUE, PFDATETIME 
FROM PF_ITEMCONTEXT IC,
     IRV_CUR_CONFIGTYPE CT,
     IRV_CUR_CONFIGTYPE_ATTRIBUTES CTA,
     RT_CONTROLDATA CCD
WHERE IC.CONTEXTID = CCD.CONTEXTID
AND IC.SUBJECTKEYTYPE = CT.CONFIGTYPEID
AND IC.CHAPTERID = CTA.VISITID
AND IC.PAGEID = CTA.FORMID
AND IC.SECTIONID = CTA.SECTIONID
AND IC.ITEMID = CTA.ITEMID;


CREATE OR REPLACE VIEW IRV_CUR_CONFIG1
AS
SELECT CONFIGID,
       MAX(CASE WHEN ATTRIBUTENAME = 'ALLOWCPRESIZE' THEN STRVALUE ELSE NULL END) AS ALLOWCPRESIZE,
       MAX(CASE WHEN ATTRIBUTENAME = 'ALLOWPASSWORDREUSE' THEN STRVALUE ELSE NULL END) AS ALLOWPASSWORDREUSE,
       MAX(CASE WHEN ATTRIBUTENAME = 'AUTOCLOSEMANUALQUERIES' THEN STRVALUE ELSE NULL END) AS AUTOCLOSEMANUALQUERIES,
       MAX(CASE WHEN ATTRIBUTENAME = 'COOKSERVER' THEN STRVALUE ELSE NULL END) AS COOKSERVER,
       MAX(CASE WHEN ATTRIBUTENAME = 'DAYSPASSWORDEXPIRATION' THEN STRVALUE ELSE NULL END) AS DAYSPASSWORDEXPIRATION,
       MAX(CASE WHEN ATTRIBUTENAME = 'DEFAULTCPMAXIMIZED' THEN STRVALUE ELSE NULL END) AS DEFAULTCPMAXIMIZED,
       MAX(CASE WHEN ATTRIBUTENAME = 'ENABLEFORGOTPASSWORD' THEN STRVALUE ELSE NULL END) AS ENABLEFORGOTPASSWORD,
       MAX(CASE WHEN ATTRIBUTENAME = 'ENFORCEVISITDATE' THEN STRVALUE ELSE NULL END) AS ENFORCEVISITDATE,
       MAX(CASE WHEN ATTRIBUTENAME = 'ENROLLWITHINCOMPLETEFORMS' THEN STRVALUE ELSE NULL END) AS ENROLLWITHINCOMPLETEFORMS,
       MAX(CASE WHEN ATTRIBUTENAME = 'EXEPLANSERVER' THEN STRVALUE ELSE NULL END) AS EXEPLANSERVER,
       MAX(CASE WHEN ATTRIBUTENAME = 'INACTIVATERETRYCOUNT' THEN STRVALUE ELSE NULL END) AS INACTIVATERETRYCOUNT,
       MAX(CASE WHEN ATTRIBUTENAME = 'MAXNUMOFRESUBMISSIONS' THEN STRVALUE ELSE NULL END) AS MAXNUMOFRESUBMISSIONS,
       MAX(CASE WHEN ATTRIBUTENAME = 'MINPASSWORDLENGTH' THEN STRVALUE ELSE NULL END) AS MINPASSWORDLENGTH,
       MAX(CASE WHEN ATTRIBUTENAME = 'MINUTESREAUTHENTICATE' THEN STRVALUE ELSE NULL END) AS MINUTESREAUTHENTICATE,
       MAX(CASE WHEN ATTRIBUTENAME = 'MINUTESREIDENTIFICATION' THEN STRVALUE ELSE NULL END) AS MINUTESREIDENTIFICATION,
       MAX(CASE WHEN ATTRIBUTENAME = 'NAVIGATIONMODE' THEN STRVALUE ELSE NULL END) AS NAVIGATIONMODE,
       MAX(CASE WHEN ATTRIBUTENAME = 'NUMCHARSCRFLENGTH' THEN STRVALUE ELSE NULL END) AS NUMCHARSCRFLENGTH,
       MAX(CASE WHEN ATTRIBUTENAME = 'NUMOFEXEPLANLISTENTHREADS' THEN STRVALUE ELSE NULL END) AS NUMOFEXEPLANLISTENTHREADS
FROM IRV_CUR_CONFIG_PROPERTIES
GROUP BY CONFIGID;

CREATE OR REPLACE VIEW IRV_CUR_CONFIG2
AS
SELECT CONFIGID,
       MAX(CASE WHEN ATTRIBUTENAME = 'ONENONALPHANUMERICCHARACTER' THEN STRVALUE ELSE NULL END) AS ONENONALPHANUMERICCHARACTER,
       MAX(CASE WHEN ATTRIBUTENAME = 'ONENUMERICALCHARACTER' THEN STRVALUE ELSE NULL END) AS ONENUMERICALCHARACTER,
       MAX(CASE WHEN ATTRIBUTENAME = 'ONEUPPERCASECHARACTER' THEN STRVALUE ELSE NULL END) AS ONEUPPERCASECHARACTER,
       MAX(CASE WHEN ATTRIBUTENAME = 'POSTQUERYFORCONFLICTRESOLUTION' THEN STRVALUE ELSE NULL END) AS POSTQUERYFORCONFLICTRESOLUTION,
       MAX(CASE WHEN ATTRIBUTENAME = 'QUERYMAXLENGTH' THEN STRVALUE ELSE NULL END) AS QUERYMAXLENGTH,
       MAX(CASE WHEN ATTRIBUTENAME = 'RANDOMIZATIONSRC' THEN STRVALUE ELSE NULL END) AS RANDOMIZATIONSRC,
       MAX(CASE WHEN ATTRIBUTENAME = 'RANDSIMPLECENTRAL' THEN STRVALUE ELSE NULL END) AS RANDSIMPLECENTRAL,
       MAX(CASE WHEN ATTRIBUTENAME = 'REQUIRECOMMENTFORNA' THEN STRVALUE ELSE NULL END) AS REQUIRECOMMENTFORNA,
       MAX(CASE WHEN ATTRIBUTENAME = 'SCREENINGSEQUENCE' THEN STRVALUE ELSE NULL END) AS SCREENINGSEQUENCE,
       MAX(CASE WHEN ATTRIBUTENAME = 'SPONSOREDITFROZEN' THEN STRVALUE ELSE NULL END) AS SPONSOREDITFROZEN,
       MAX(CASE WHEN ATTRIBUTENAME = 'SSLFLAG' THEN STRVALUE ELSE NULL END) AS SSLFLAG,
       MAX(CASE WHEN ATTRIBUTENAME = 'TRIALDATEFORMAT' THEN NUMVALUE ELSE NULL END) AS TRIALDATEFORMAT,
       MAX(CASE WHEN ATTRIBUTENAME = 'UNIQUEINTLDOBSWTCH' THEN STRVALUE ELSE NULL END) AS UNIQUEINTLDOBSWTCH,
       MAX(CASE WHEN ATTRIBUTENAME = 'UNIQUEPATIDSWTCH' THEN STRVALUE ELSE NULL END) AS UNIQUEPATIDSWTCH,
       MAX(CASE WHEN ATTRIBUTENAME = 'VIEWCRFSIGNLIST' THEN STRVALUE ELSE NULL END) AS VIEWCRFSIGNLIST
FROM IRV_CUR_CONFIG_PROPERTIES
GROUP BY CONFIGID;

CREATE OR REPLACE VIEW IRV_CUR_CONFIG
AS
SELECT C1.CONFIGID, 
       ALLOWCPRESIZE, ALLOWPASSWORDREUSE, AUTOCLOSEMANUALQUERIES, 
       COOKSERVER, 
       DAYSPASSWORDEXPIRATION, DEFAULTCPMAXIMIZED, 
       ENABLEFORGOTPASSWORD, ENFORCEVISITDATE, ENROLLWITHINCOMPLETEFORMS, EXEPLANSERVER, 
       INACTIVATERETRYCOUNT, 
       MAXNUMOFRESUBMISSIONS, MINPASSWORDLENGTH, MINUTESREAUTHENTICATE, MINUTESREIDENTIFICATION, 
       NAVIGATIONMODE, NUMCHARSCRFLENGTH, NUMOFEXEPLANLISTENTHREADS,
       ONENONALPHANUMERICCHARACTER, ONENUMERICALCHARACTER, ONEUPPERCASECHARACTER, 
       POSTQUERYFORCONFLICTRESOLUTION, 
       QUERYMAXLENGTH, 
       RANDOMIZATIONSRC, RANDSIMPLECENTRAL, REQUIRECOMMENTFORNA, 
       SCREENINGSEQUENCE, SPONSOREDITFROZEN, SSLFLAG, 
       TRIALDATEFORMAT, 
       UNIQUEINTLDOBSWTCH, UNIQUEPATIDSWTCH, 
       VIEWCRFSIGNLIST
FROM IRV_CUR_CONFIG1 C1,
     IRV_CUR_CONFIG2 C2
WHERE C1.CONFIGID = C2.CONFIGID;


--STUDY
CREATE OR REPLACE VIEW IRV_DIM_SPONSOR
AS
SELECT SPONSORID,
       COUNT(*) AS SPONSORREVS,
       MIN(SPONSORREVISIONNUMBER) AS MINSPONSORREV,
       MAX(SPONSORREVISIONNUMBER) AS MAXSPONSORREV
FROM PF_SPONSOR
GROUP BY SPONSORID;

CREATE OR REPLACE VIEW IRV_CUR_SPONSOR
AS
SELECT 
       SR.SPONSORID, SPONSORREVISIONNUMBER,
--       DECODE(MINSPONSORREV,SPONSORREVISIONNUMBER,1,0) AS FIRSTREV,
--       DECODE(MAXSPONSORREV,SPONSORREVISIONNUMBER,1,0) AS CURRENTREV,
       SPONSORCONTACTUSERID, SPONSORNAME, ADDRESS1, ADDRESS2, CITY, STATE_PROVINCE, ZIPCODE_POSTCODE, COUNTRY, 
       PHONE, FAX, ALTPHONE, EMAILADDRESS, LOGOID, THERAPUTICAREA, PROGRAMNAME, NOTE
FROM PF_SPONSOR SR,
     IRV_DIM_SPONSOR S
WHERE S.SPONSORID = SR.SPONSORID
and DECODE(MAXSPONSORREV,SPONSORREVISIONNUMBER,1,0) = 1;

CREATE OR REPLACE VIEW IRV_DIM_STUDY
AS
SELECT VOLUMEID AS STUDYID
FROM PF_VOLUME;


CREATE OR REPLACE VIEW IRV_DIM_STUDYVERSION
AS
SELECT VOLUMEEDITIONID AS STUDYVERSIONID,VOLUMEID AS STUDYID
FROM PF_VOLUMEEDITION SV;

CREATE OR REPLACE VIEW IRV_STUDYVERSIONS
AS
SELECT VOLUMEEDITIONID AS STUDYVERSIONID, 
       VE.VOLUMEID AS STUDYID, VOLUMEEDITION AS STUDYREV,PFTIMESTAMP AS REVTIME,
       VOLUMETYPE AS STUDYTYPE, STUDYNAME, TRADEDRUGNAME, GENERICDRUGNAME, SPONSORDRUGNAME,
       SPONSORAPPROVALDATE, EDITIONDESCRIPTION, PROTOCOLVERSION AS STUDYVERSION, DESIGNNOTE AS PROTOCOLDESIGNNOTE
FROM PF_VOLUME V, 
     PF_VOLUMEEDITION VE,
     PF_REVISIONHISTORY REV
WHERE V.VOLUMEID = VE.VOLUMEID
AND STUDYNAME != 'InForm System Forms'
AND DBUID = VE.VOLUMEID 
AND REVISIONNUMBER = VE.VOLUMEEDITION;


--SITE

CREATE OR REPLACE VIEW IRV_DIM_SITE
AS
SELECT SITEID,
       SITETHINGTYPEID
FROM PF_SITE S,
     RT_INFORMREP IR;

CREATE OR REPLACE VIEW IRV_CUR_SITE
AS
SELECT 1 AS SITECOUNT,
       SITETYPEID,SITEID, SITEREV, 
       SUBSTR(SITENAME,1,80) AS SITENAME,
       SITEADDRESS1, SITEADDRESS2, SITEALTPHONENUMBER, -- SITEBEEPER, SITECONTACTUSER, 
       SITECITY,
       SUBSTR(NVL2(SITECOUNTRY,SITECOUNTRY,'Not Specified'),1,80) AS SITECOUNTRY, 
       SITEDATEFORMAT, SITEDAYPHONENUMBER, SITEEMAILADDRESS, SITEFAXNUMBER, 
       SUBSTR(SITEMNEMONIC,1,10) AS SITEMNEMONIC, 
       SITEPOSTALCODE, SITESERVER, SITESTATEPROVINCE, SITESTUDYINITIATIONDATE, SITESTUDYTERMINATIONDATE, SITETIMEZONE
FROM RT_SITE;

CREATE OR REPLACE VIEW IRV_SITE_REVS
AS
SELECT SITETYPEID,SITEID,SITEREV,
       ENTEREDBY, ENTEREDDATE, ENTEREDREASON, TRANSACTIONID,
       SUBSTR(MAX(DECODE(ATTRIBUTENAME,'GroupName',STRVALUE,NULL)),1,80) AS SITENAME,
       MAX(DECODE(ATTRIBUTENAME,'SiteAddress1',STRVALUE,NULL)) AS SITEADDRESS1,
       MAX(DECODE(ATTRIBUTENAME,'SiteAddress2',STRVALUE,NULL)) AS SITEADDRESS2,
       MAX(DECODE(ATTRIBUTENAME,'SiteAltPhoneNumber',STRVALUE,NULL)) AS SITEALTPHONENUMBER,
       MAX(DECODE(ATTRIBUTENAME,'SiteBeeper',STRVALUE,NULL)) AS SITEBEEPER,
       MAX(DECODE(ATTRIBUTENAME,'SiteCity',STRVALUE,NULL)) AS SITECITY,
       MAX(DECODE(ATTRIBUTENAME,'SiteContactUser',STRVALUE,NULL)) AS SITECONTACTUSER,
       SUBSTR(MAX(DECODE(ATTRIBUTENAME,'SiteCountry',STRVALUE,NULL)),1,80) AS SITECOUNTRY,
       MAX(DECODE(ATTRIBUTENAME,'SiteDateFormat',NUMVALUE,NULL)) AS SITEDATEFORMAT,
       MAX(DECODE(ATTRIBUTENAME,'SiteDayPhoneNumber',STRVALUE,NULL)) AS SITEDAYPHONENUMBER,
       MAX(DECODE(ATTRIBUTENAME,'SiteEmailAddress',STRVALUE,NULL)) AS SITEEMAILADDRESS,
       MAX(DECODE(ATTRIBUTENAME,'SiteFaxNumber',STRVALUE,NULL)) AS SITEFAXNUMBER,
       SUBSTR(MAX(DECODE(ATTRIBUTENAME,'SiteMnemonic',STRVALUE,NULL)),1,10) AS SITEMNEMONIC,
       MAX(DECODE(ATTRIBUTENAME,'SitePostalCode',STRVALUE,NULL)) AS SITEPOSTALCODE,
       MAX(DECODE(ATTRIBUTENAME,'SiteServer',STRVALUE,NULL)) AS SITESERVER,
       MAX(DECODE(ATTRIBUTENAME,'SiteStateProvince',STRVALUE,NULL)) AS SITESTATEPROVINCE,
       MAX(DECODE(ATTRIBUTENAME,'SiteStudyInitiationDate',PFDATETIME,NULL)) AS SITESTUDYINITIATIONDATE,
       MAX(DECODE(ATTRIBUTENAME,'SiteStudyTerminationDate',PFDATETIME,NULL)) AS SITESTUDYTERMINATIONDATE,
       MAX(DECODE(ATTRIBUTENAME,'SiteTimeZone',STRVALUE,NULL)) AS SITETIMEZONE
FROM RV_SITE_PROPERTIES_REVS SPR
GROUP BY SITETYPEID,SITEID,SITEREV,ENTEREDBY, ENTEREDDATE, ENTEREDREASON, TRANSACTIONID;

--USER

CREATE OR REPLACE VIEW IRV_DIM_USER
AS
SELECT USERID,
       USERTHINGTYPEID
FROM PF_USER U,
     RT_INFORMREP IR;

CREATE OR REPLACE VIEW IRV_CUR_USERLIST
AS
SELECT G.GROUPID,G.GROUPNAME,RD.RESOURCESTRING AS GROUPTYPE,G.GROUPTYPENAME,G.USERID 
FROM RT_USERLIST G,
    PF_ENTITYMAPPING EM,
    PF_RESOURCEDATA_CUR RD,
    RT_INFORMREP IR
WHERE G.USERLISTREV = G.ISMEMBEROFREV
AND EM.DBUID= RD.RESOURCEID
AND EM.ENTITYID=UPPER(G.GROUPTYPENAME || '_NAME')
and RD.languageid=IR.DEFAULTPRODUCTLANGUAGEID
UNION
SELECT GROUPID,
       'AUTO Query Group' AS GROUPNAME,
       'Query' AS GROUPTYPE,
       GROUPTYPENAME,
       (select USERID from PF_USER where USERNAME='autoquery' AND USERTYPE=0) AS USERID
FROM PF_GROUP
WHERE GROUPID=7;

CREATE OR REPLACE VIEW IRV_CUR_USER
AS
SELECT 1 AS USERCOUNT,
       U.USERTYPEID,
       U.USERID, USERREV, USERCREATETIME, 
       UA.MAXACTIVATETIME AS USERACTIVESTATETIME,
       UA.MAXDELETETIME AS USERDELETESTATETIME,USERREVTIME,
       SUBSTR(U.USERNAME,1,32) AS USERNAME,
       GROUPID AS RIGHTSGROUPID,GROUPNAME AS RIGHTSGROUP,
       USERACTIVESTATE, USERADDRESS1, USERADDRESS2, USERALTPHONENUMBER, USERAUTHTYPE, USERCITY, USERCONFLICT, USERCOUNTRY, 
       USERDATEFORMAT, USERDAYPHONENUMBER, USERDELETESTATE, USERDESCRIPTION, USERDISPLAYNAME, USEREMAILADDRESS, USERFAXNUMBER, 
       USERFIRSTNAME, USERHOMESCREENURL, USERIMAGEID, USERLASTNAME, USERPOSTALCODE, USERRESETPASSWORD, 
       USERSTATEPROVINCE, UA.USERSUBJECTGUID, UA.USERLANGID,
       USERTITLE, USERTYPE,
       MINACTIVATETIME AS USERMINACTIVESTATETIME, MINDELETETIME AS USERMINDELETESTATETIME
FROM RT_USER U,
     RV_CUR_USER_RIGHTSGROUP URG,
     (SELECT userid,
      usertypeid,
      MAX(DECODE(CURRENTREV,1,DECODE(ATTRIBUTENAME,'UserLangID',STRVALUE,NULL),NULL)) USERLANGID,
      MAX(DECODE(CURRENTREV,1,DECODE(ATTRIBUTENAME,'UserSubjectGUID',STRVALUE,NULL),NULL)) USERSUBJECTGUID,
      MAX(DECODE(ATTRIBUTENAME,'UserActiveState',DECODE(NUMVALUE, 1, ENTEREDDATE,NULL),NULL)) MaxActivateTime,
      min(DECODE(ATTRIBUTENAME,'UserActiveState',DECODE(NUMVALUE, 1, ENTEREDDATE,NULL),NULL)) MinActivateTime,
      MAX(DECODE(ATTRIBUTENAME,'UserDeleteState',DECODE(NUMVALUE, 1, ENTEREDDATE,NULL),NULL)) MaxDeleteTime,
      min(DECODE(ATTRIBUTENAME,'UserDeleteState',DECODE(NUMVALUE, 1, ENTEREDDATE,NULL),NULL)) MinDeleteTime
    FROM RV_USER_PROPERTIES_REVS
group by userid, usertypeid
) UA
WHERE U.USERID = URG.USERID (+) 
and U.USERID = UA.USERID and U.USERTYPEID = UA.USERTYPEID;


CREATE OR REPLACE VIEW IRV_USER_REVS
AS
SELECT USERTYPEID,USERID,USERREV,
       ENTEREDBY, ENTEREDDATE, ENTEREDREASON, TRANSACTIONID,
       SUBSTR(MAX(DECODE(ATTRIBUTENAME,'UserName',STRVALUE,NULL)),1,32) USERNAME,
       MAX(DECODE(ATTRIBUTENAME,'UserActiveState',NUMVALUE,NULL)) USERACTIVESTATE,
       MAX(DECODE(ATTRIBUTENAME,'UserAddress1',STRVALUE,NULL)) USERADDRESS1,
       MAX(DECODE(ATTRIBUTENAME,'UserAddress2',STRVALUE,NULL)) USERADDRESS2,
       MAX(DECODE(ATTRIBUTENAME,'UserAltPhoneNumber',STRVALUE,NULL)) USERALTPHONENUMBER,
       MAX(DECODE(ATTRIBUTENAME,'UserAnswer',STRVALUE,NULL)) USERANSWER,
       MAX(DECODE(ATTRIBUTENAME,'UserAuthType',STRVALUE,NULL)) USERAUTHTYPE,
       MAX(DECODE(ATTRIBUTENAME,'UserCity',STRVALUE,NULL)) USERCITY,
       MAX(DECODE(ATTRIBUTENAME,'UserConflict',NUMVALUE,NULL)) USERCONFLICT,
       MAX(DECODE(ATTRIBUTENAME,'UserCountry',STRVALUE,NULL)) USERCOUNTRY,
       MAX(DECODE(ATTRIBUTENAME,'UserDateFormat',NUMVALUE,NULL)) USERDATEFORMAT,
       MAX(DECODE(ATTRIBUTENAME,'UserDayPhoneNumber',STRVALUE,NULL)) USERDAYPHONENUMBER,
       MAX(DECODE(ATTRIBUTENAME,'UserDeleteState',NUMVALUE,NULL)) USERDELETESTATE,
       MAX(DECODE(ATTRIBUTENAME,'UserDescription',STRVALUE,NULL)) USERDESCRIPTION,
       MAX(DECODE(ATTRIBUTENAME,'UserDisplayName',STRVALUE,NULL)) USERDISPLAYNAME,
       MAX(DECODE(ATTRIBUTENAME,'UserEmailAddress',STRVALUE,NULL)) USEREMAILADDRESS,
       MAX(DECODE(ATTRIBUTENAME,'UserFaxNumber',STRVALUE,NULL)) USERFAXNUMBER,
       MAX(DECODE(ATTRIBUTENAME,'UserFirstName',STRVALUE,NULL)) USERFIRSTNAME,
       MAX(DECODE(ATTRIBUTENAME,'UserHintQuestion',STRVALUE,NULL)) USERHINTQUESTION,
       MAX(DECODE(ATTRIBUTENAME,'UserHomeScreenURL',STRVALUE,NULL)) USERHOMESCREENURL,
       MAX(DECODE(ATTRIBUTENAME,'UserImageID',STRVALUE,NULL)) USERIMAGEID,
       MAX(DECODE(ATTRIBUTENAME,'UserLangID',STRVALUE,NULL)) USERLANGID,
       MAX(DECODE(ATTRIBUTENAME,'UserLastName',STRVALUE,NULL)) USERLASTNAME,
       MAX(DECODE(ATTRIBUTENAME,'UserPostalCode',STRVALUE,NULL)) USERPOSTALCODE,
       MAX(DECODE(ATTRIBUTENAME,'UserResetPassword',NUMVALUE,NULL)) USERRESETPASSWORD,
       MAX(DECODE(ATTRIBUTENAME,'UserStateProvince',STRVALUE,NULL)) USERSTATEPROVINCE,
       MAX(DECODE(ATTRIBUTENAME,'UserSubjectGUID',STRVALUE,NULL)) USERSUBJECTGUID,
       MAX(DECODE(ATTRIBUTENAME,'UserTitle',STRVALUE,NULL)) USERTITLE,
       MAX(DECODE(ATTRIBUTENAME,'UserType',NUMVALUE,NULL)) USERTYPE
FROM RV_USER_PROPERTIES_REVS UPR
GROUP BY USERTYPEID,USERID,USERREV,ENTEREDBY, ENTEREDDATE, ENTEREDREASON, TRANSACTIONID;

CREATE OR REPLACE VIEW IRV_USERS_SITES
AS
SELECT USERID, SITEID, RIGHTSGROUPID, 
       SUBSTR(USERNAME,1,32) AS USERNAME, 
       RIGHTSGROUP,
       SUBSTR(SITEMNEMONIC,1,10) AS SITEMNEMONIC, 
       SUBSTR(SITENAME,1,80) AS SITENAME,
       SUBSTR(NVL2(SITECOUNTRY,SITECOUNTRY,'Not Specified'),1,80) AS SITECOUNTRY
FROM RT_USER_SITES;

-- DEFAULT BLINDING FOR EACH ITEM

CREATE OR REPLACE VIEW IRV_ITEM_DEFAULTBLIND
AS
SELECT USERID, SUBSTR(USERNAME,1,32) AS USERNAME,GROUPID,ITEMID,ITEMREVISIONNUMBER AS ITEMREV,
       DECODE(DISPLAYOVERRIDE,3,1,0) AS DEFAULTBLINDED
FROM RV_CUR_USER_RIGHTSGROUP URG,
     PF_ITEM IR;



-- PER-RIGHTSGROUP BLINDING OVERRIDES

CREATE OR REPLACE VIEW IRV_BLINDING_OVERRIDES
AS
SELECT RIGHTSGROUPID,
       II1.ITEMID,
       --       DECODE(DISPLAYOVERRIDETYPE,3,1,0) AS RIGHTSGROUPBLINDED
       DECODE(DISPLAYOVERRIDETYPE,3,1, 1,0, 2,0, -1) AS RIGHTSGROUPBLINDED -- 1 for blinded, 0 for not blinded, -1 for default
FROM PF_RIGHTSGROUPITEMGROUPS RI1,
     PF_ITEMGROUPITEMS II1
WHERE RI1.ITEMGROUPLISTREVISIONNUMBER = (SELECT MAX (RI2.ITEMGROUPLISTREVISIONNUMBER)
                                       FROM PF_RIGHTSGROUPITEMGROUPS RI2
                                       WHERE RI2.ITEMGROUPID = RI1.ITEMGROUPID
                                       AND RI2.RIGHTSGROUPID = RI1.RIGHTSGROUPID)
AND RI1.ITEMGROUPID = II1.ITEMGROUPID
AND II1.ITEMLISTREVISIONNUMBER = (SELECT MAX (II2.ITEMLISTREVISIONNUMBER)
                                  FROM PF_ITEMGROUPITEMS II2
                                  WHERE II2.ITEMID = II1.ITEMID);


CREATE OR REPLACE VIEW IRV_USER_ACTIVESTATE_CHANGES
AS
SELECT UPR.USERID, UPR.USERREV,FIRSTREV, CURRENTREV, NUMVALUE AS USERACTIVESTATE, 
       SUBSTR(U.USERNAME,1,32) AS ENTEREDBY, 
       ENTEREDDATE, ENTEREDREASON 
FROM RV_USER_PROPERTIES_REVS UPR,
     RT_USER U
WHERE ATTRIBUTENAME = 'UserActiveState'
AND U.USERID = ENTEREDBY;

--METADATA

CREATE OR REPLACE VIEW IRV_DIM_CONTROL
AS
SELECT CONTROLID,
       COUNT(*) AS CREVS,
       MIN(CONTROLREVISIONNUMBER) AS MINCONTROLREV,
       MAX(CONTROLREVISIONNUMBER) AS MAXCONTROLREV
FROM PF_CONTROL C
GROUP BY CONTROLID;


CREATE OR REPLACE VIEW IRV_CONTROL_REVS
AS
SELECT --ROWID AS MDCONTROLID,
       CONTROLID, CONTROLREV, FIRSTREV,CURRENTREV,
       CONTROLREFNAME, CONTROLNAME, CONTROLCAPTION, CONTROLTABLE, CONTROLTYPE, 
       CONTROLLAYOUT, CONTROLALIGNMENT, CAPTIONALIGNMENT, HEIGHT, UNITDISPLAYTYPE, CONTROLDESIGNNOTE
FROM RT_CONTROL_REVS C;

CREATE OR REPLACE VIEW IRV_DIM_ITEM
AS
SELECT ITEMID,
       COUNT(*) AS IREVS,
       MIN(ITEMREVISIONNUMBER) AS MINITEMREV,
       MAX(ITEMREVISIONNUMBER) AS MAXITEMREV
FROM PF_ITEM C
GROUP BY ITEMID;

CREATE OR REPLACE VIEW IRV_ITEM_REVS
AS
SELECT ITEMID, ITEMREV, FIRSTREV, CURRENTREV,
       ITEMLAYOUT, ITEMLABEL, ITEMQUESTION, 
       CONTROLID, CONTROLREV, CALCULATED, SDVREQUIRED, RANDOMIZE, ITEMREQUIRED, ITEMREFNAME, DISPLAYOVERRIDE, ITEMHELPURL, ITEMDESIGNNOTE
FROM RT_ITEM_REVS
WHERE ITEM = 1;

-- ITEMSETS

CREATE OR REPLACE VIEW IRV_ITEMSET_REVS
AS
SELECT ITEMID AS ITEMSETID, ITEMREV AS ITEMSETREV, 
       ITEMREFNAME AS ITEMSETREFNAME, 
       SDVREQUIRED, ITEMREQUIRED AS ITEMSETREQUIRED, 
       DISPLAYOVERRIDE, ITEMHELPURL AS ITEMSETHELPURL, ITEMDESIGNNOTE AS ITEMSETDESIGNNOTE
FROM RT_ITEM_REVS
WHERE ITEMSET = 1;

CREATE OR REPLACE VIEW IRV_DIM_SECTION
AS
SELECT SECTIONID,
       COUNT(*) AS SREVS,
       MIN(SECTIONREVISIONNUMBER) AS MINSECTIONREV,
       MAX(SECTIONREVISIONNUMBER) AS MAXSECTIONREV
FROM PF_SECTION S
GROUP BY SECTIONID;

CREATE OR REPLACE VIEW IRV_DIM_FORM
AS
SELECT PAGEID AS FORMID,
       COUNT(*) AS FREVS,
       MIN(PAGEREVISIONNUMBER) AS MINFORMREV,
       MAX(PAGEREVISIONNUMBER) AS MAXFORMREV
FROM PF_PAGE F
GROUP BY PAGEID;

CREATE OR REPLACE VIEW IRV_FORM_REVS
AS
SELECT FORMID, FORMREV,FIRSTREV,CURRENTREV,
       FORMREFNAME, SUBSTR(FORMNAME,1,50) AS FORMNAME, SUBSTR(FORMMNEMONIC,1,10) AS FORMMNEMONIC, 
       FORMNOTE, FORMTYPE, FORMHELPURL, QUESTIONWIDTH, CONTROLWIDTH, REPEATINGFORM, FORMUNIQUEKEY, FORMDESIGNNOTE
FROM RT_FORM_REVS;

--one row for each form in every revision
CREATE OR REPLACE VIEW IRV_FORM_REVS_M AS
SELECT 
       F.PAGEID AS FORMID,
       F.PAGEREVISIONNUMBER AS FORMREV,
       DECODE(F.PAGEREVISIONNUMBER,MINFORMREV,1,0) AS FIRSTREV,
       DECODE(F.PAGEREVISIONNUMBER,MAXFORMREV,1,0) AS CURRENTREV,
       F.PAGEREFNAME AS FORMREFNAME,
       FNM.FORMNAME,
       --F.PAGEMNEMONIC, 
       --FM.RESOURCEREV MAXRESOURCEREV,
       RD.RESOURCESTRING AS FORMMNEMONIC,
       FNT.FORMNOTE,
       F.PAGETYPE AS FORMTYPE,
       HELPURL AS FORMHELPURL, 
       QUESTIONWIDTH, CONTROLWIDTH, 
       REPEATING AS REPEATINGFORM, UNIQUEKEY As FORMUNIQUEKEY, DESIGNNOTE AS FORMDESIGNNOTE
FROM PF_PAGE F,
     (SELECT PAGEID AS FORMID, MIN(PAGEREVISIONNUMBER) AS MINFORMREV, MAX(PAGEREVISIONNUMBER) AS MAXFORMREV
      FROM PF_PAGE F GROUP BY PAGEID) DF,
     RV_FORM_NAME FNM,
     RV_FORM_NOTE FNT,
     RT_RESOURCEDATA RD
WHERE F.PAGEID = FNT.FORMID
AND F.PAGEID = FNM.FORMID
AND F.PAGEID = DF.FORMID
AND F.PAGEMNEMONIC = RD.RESOURCEID (+);

CREATE OR REPLACE VIEW IRV_FORMSECTIONS
AS
SELECT PAGEID AS FORMID, PAGEREVISIONNUMBER AS FORMREV, 
       SECTIONID, SECTIONREVISIONNUMBER AS SECTIONREV,
       SECTIONORDER, NUMBERSTART, NUMBERTYPE
FROM PF_PAGESECTION PS;


CREATE OR REPLACE VIEW IRV_SECTIONITEMS
AS
SELECT SECTIONID, SECTIONREVISIONNUMBER AS SECTIONREV, ITEMID, ITEMREVISIONNUMBER AS ITEMREV, SECTIONITEMORDER, INITIALROWCOUNT, ROWCOUNTFIXED
FROM PF_SECTIONITEM, PF_ITEMSET
WHERE PF_SECTIONITEM.ITEMID = PF_ITEMSET.ITEMSETID (+)
AND PF_SECTIONITEM.ITEMREVISIONNUMBER = PF_ITEMSET.ITEMSETREVISIONNUMBER (+);

CREATE OR REPLACE VIEW IRV_SECTION_REVS
AS
SELECT S.SECTIONID AS SECTIONID,
    S.SECTIONREV AS SECTIONREV,
    S.FIRSTREV AS FIRSTREV,
    S.CURRENTREV AS CURRENTREV,
    S.SECTIONREFNAME AS SECTIONREFNAME,
    SUBSTR(S.SECTIONHEADER,1,80) SECTIONHEADER,
    S.SECTIONNOTE AS SECTIONNOTE,
    S.REPEATINGSECTION AS REPEATINGSECTION,
    S.SECTIONDESIGNNOTE AS SECTIONDESIGNNOTE,
    MIN(I.INITIALROWCOUNT) AS INITIALROWCOUNT,
    MIN(I.ROWCOUNTFIXED) AS ROWCOUNTFIXED
FROM RT_SECTION_REVS S, IRV_SECTIONITEMS I
WHERE S.SECTIONID=I.SECTIONID
AND   S.SECTIONREV=I.SECTIONREV
GROUP BY S.SECTIONID, S.SECTIONREV, S.FIRSTREV, S.CURRENTREV, S.SECTIONREFNAME, S.SECTIONHEADER, S.SECTIONNOTE, S.REPEATINGSECTION, S.SECTIONDESIGNNOTE;


CREATE OR REPLACE VIEW IRV_MDFIS_I
AS
SELECT PAGEID AS FORMID, PAGEREVISIONNUMBER AS FORMREV, 
       SECTIONORDER AS FORMSECTIONORDER,
       FS.SECTIONID, FS.SECTIONREVISIONNUMBER AS SECTIONREV,
       SECTIONITEMORDER,
       COALESCE(GROUPITEMID,0) AS ITEMSETID,
       COALESCE(GROUPITEMREVISIONNUMBER,0) AS ITEMSETREV,
       COALESCE(CHILDITEMORDER,0) AS ITEMSETITEMORDER,
       COALESCE(CHILDITEMID,ITEMID) AS ITEMID,
       COALESCE(CHILDITEMREVISIONNUMBER,ITEMREVISIONNUMBER) AS ITEMREV
FROM PF_PAGESECTION FS,
     PF_SECTIONITEM SI,
     PF_ITEMGROUP IG
WHERE FS.SECTIONID = SI.SECTIONID
AND FS.SECTIONREVISIONNUMBER = SI.SECTIONREVISIONNUMBER
AND SI.ITEMID = IG.GROUPITEMID (+)
AND SI.ITEMREVISIONNUMBER = IG.GROUPITEMREVISIONNUMBER (+);

CREATE OR REPLACE VIEW IRV_ITEM_CONTROLS
AS
SELECT ITEMID,ITEMREV,
       CONTROLID AS ROOTCONTROLID, CONTROLREV AS ROOTCONTROLREV,
       C4.CHILDCONTROLID AS CHILDID,
       C4.CHILDREVISIONNUMBER AS CHILDREV,
       4 AS CHILDDEPTH,
       C4.CHILDCONTROLORDER AS CHILDORDER,
       C4.SELECTIONVALUE AS CHILDSELECT,
       C1.CHILDCONTROLID AS CHILD1ID,C1.CHILDREVISIONNUMBER AS CHILD1REV,C1.CHILDCONTROLORDER AS CHILD1ORDER,C1.SELECTIONVALUE AS CHILD1SELECT,
       C2.CHILDCONTROLID AS CHILD2ID,C2.CHILDREVISIONNUMBER AS CHILD2REV,C2.CHILDCONTROLORDER AS CHILD2ORDER,C2.SELECTIONVALUE AS CHILD2SELECT,
       C3.CHILDCONTROLID AS CHILD3ID,C3.CHILDREVISIONNUMBER AS CHILD3REV,C3.CHILDCONTROLORDER AS CHILD3ORDER,C3.SELECTIONVALUE AS CHILD3SELECT,
       C4.CHILDCONTROLID AS CHILD4ID,C4.CHILDREVISIONNUMBER AS CHILD4REV,C4.CHILDCONTROLORDER AS CHILD4ORDER,C4.SELECTIONVALUE AS CHILD4SELECT
FROM IRV_ITEM_REVS I,
     PF_GROUPCONTROL C1,
     PF_GROUPCONTROL C2,
     PF_GROUPCONTROL C3,
     PF_GROUPCONTROL C4
WHERE I.CONTROLID = C1.GROUPCONTROLID
AND I.CONTROLREV = C1.GROUPREVISIONNUMBER
AND C1.CHILDCONTROLID = C2.GROUPCONTROLID
AND C1.CHILDREVISIONNUMBER = C2.GROUPREVISIONNUMBER
AND C2.CHILDCONTROLID = C3.GROUPCONTROLID
AND C2.CHILDREVISIONNUMBER = C3.GROUPREVISIONNUMBER
AND C3.CHILDCONTROLID = C4.GROUPCONTROLID
AND C3.CHILDREVISIONNUMBER = C4.GROUPREVISIONNUMBER
UNION ALL  -- 3
SELECT ITEMID,ITEMREV,
       CONTROLID, CONTROLREV,
       C3.CHILDCONTROLID AS CHILDID,
       C3.CHILDREVISIONNUMBER AS CHILDREV,
       3 AS CHILDDEPTH,
       C3.CHILDCONTROLORDER AS CHILDORDER,
       C3.SELECTIONVALUE AS CHILDSELECT,
       C1.CHILDCONTROLID AS CHILD1ID,C1.CHILDREVISIONNUMBER AS CHILD1REV,C1.CHILDCONTROLORDER AS CHILD1ORDER,C1.SELECTIONVALUE AS CHILD1SELECT,
       C2.CHILDCONTROLID AS CHILD2ID,C2.CHILDREVISIONNUMBER AS CHILD2REV,C2.CHILDCONTROLORDER AS CHILD2ORDER,C2.SELECTIONVALUE AS CHILD2SELECT,
       C3.CHILDCONTROLID AS CHILD3ID,C3.CHILDREVISIONNUMBER AS CHILD3REV,C3.CHILDCONTROLORDER AS CHILD3ORDER,C3.SELECTIONVALUE AS CHILD3SELECT,
       NULL,NULL,NULL,NULL
FROM IRV_ITEM_REVS I,
     PF_GROUPCONTROL C1,
     PF_GROUPCONTROL C2,
     PF_GROUPCONTROL C3
WHERE I.CONTROLID = C1.GROUPCONTROLID
AND I.CONTROLREV = C1.GROUPREVISIONNUMBER
AND C1.CHILDCONTROLID = C2.GROUPCONTROLID
AND C1.CHILDREVISIONNUMBER = C2.GROUPREVISIONNUMBER
AND C2.CHILDCONTROLID = C3.GROUPCONTROLID
AND C2.CHILDREVISIONNUMBER = C3.GROUPREVISIONNUMBER
UNION ALL  -- 2
SELECT ITEMID,ITEMREV,
       CONTROLID, CONTROLREV,
       C2.CHILDCONTROLID AS CHILDID,
       C2.CHILDREVISIONNUMBER AS CHILDREV,
       2 AS CHILDDEPTH,
       C2.CHILDCONTROLORDER AS CHILDORDER,
       C2.SELECTIONVALUE AS CHILDSELECT,
       C1.CHILDCONTROLID AS CHILD1ID,C1.CHILDREVISIONNUMBER AS CHILD1REV,C1.CHILDCONTROLORDER AS CHILD1ORDER,C1.SELECTIONVALUE AS CHILD1SELECT,
       C2.CHILDCONTROLID AS CHILD2ID,C2.CHILDREVISIONNUMBER AS CHILD2REV,C2.CHILDCONTROLORDER AS CHILD2ORDER,C2.SELECTIONVALUE AS CHILD2SELECT,
       NULL,NULL,NULL,NULL,
       NULL,NULL,NULL,NULL
FROM IRV_ITEM_REVS I,
     PF_GROUPCONTROL C1,
     PF_GROUPCONTROL C2
WHERE I.CONTROLID = C1.GROUPCONTROLID
AND I.CONTROLREV = C1.GROUPREVISIONNUMBER
AND C1.CHILDCONTROLID = C2.GROUPCONTROLID
AND C1.CHILDREVISIONNUMBER = C2.GROUPREVISIONNUMBER
UNION ALL  -- 1
SELECT ITEMID,ITEMREV,
       CONTROLID, CONTROLREV,
       C1.CHILDCONTROLID AS CHILDID,
       C1.CHILDREVISIONNUMBER AS CHILDREV,
       1 AS CHILDDEPTH,
       C1.CHILDCONTROLORDER AS CHILDORDER,
       C1.SELECTIONVALUE AS CHILDSELECT,
       C1.CHILDCONTROLID AS CHILD1ID,C1.CHILDREVISIONNUMBER AS CHILD1REV,C1.CHILDCONTROLORDER AS CHILD1ORDER,C1.SELECTIONVALUE AS CHILD1SELECT,
       NULL,NULL,NULL,NULL,
       NULL,NULL,NULL,NULL,
       NULL,NULL,NULL,NULL
FROM IRV_ITEM_REVS I,
     PF_GROUPCONTROL C1
WHERE I.CONTROLID = C1.GROUPCONTROLID
AND I.CONTROLREV = C1.GROUPREVISIONNUMBER
UNION ALL  -- 0
SELECT ITEMID,ITEMREV,
       CONTROLID,CONTROLREV,
       CONTROLID,CONTROLREV,
       0,0,NULL,
       NULL,NULL,NULL,NULL,
       NULL,NULL,NULL,NULL,
       NULL,NULL,NULL,NULL,
       NULL,NULL,NULL,NULL
FROM IRV_ITEM_REVS I;


-- ITEMS WITH NESTED CONTROLS ATTACHED TO ITEMSETS

CREATE OR REPLACE VIEW IRV_ITEMSET_CONTROLS
AS
SELECT ITEMSETID,ITEMSETREV,
       CHILDITEMORDER AS ITEMORDER, KEYITEM, UNIQUEKEY,
       I.ITEMID,I.ITEMREV,
       ROOTCONTROLID, ROOTCONTROLREV,
       CHILDID, CHILDREV, CHILDDEPTH, CHILDORDER, CHILDSELECT, 
       CHILD1ID, CHILD1REV, CHILD1ORDER, CHILD1SELECT, 
       CHILD2ID, CHILD2REV, CHILD2ORDER, CHILD2SELECT, 
       CHILD3ID, CHILD3REV, CHILD3ORDER, CHILD3SELECT, 
       CHILD4ID, CHILD4REV, CHILD4ORDER, CHILD4SELECT
FROM IRV_ITEMSET_REVS ISET,
     PF_ITEMGROUP ISI,
     IRV_ITEM_REVS I,
     IRV_ITEM_CONTROLS CIC
WHERE ISET.ITEMSETID = ISI.GROUPITEMID
AND ISET.ITEMSETREV = ISI.GROUPITEMREVISIONNUMBER
AND ISI.CHILDITEMID = I.ITEMID
AND ISI.CHILDITEMREVISIONNUMBER = I.ITEMREV
AND I.ITEMID = CIC.ITEMID
AND I.ITEMREV = CIC.ITEMREV;

-- CREATE ONE VIEW CONTAINING ITEMSETS, ITEMS, AND CONTROLS BUILD DOWN TO THE LOWEST CHILD

CREATE OR REPLACE VIEW IRV_IS_I_CONTROLS
AS
SELECT ITEMID,ITEMREV,0 AS ITEMSET,
       ROOTCONTROLID, ROOTCONTROLREV, 
       NULL AS CHILDITEMID, NULL AS CHILDITEMREV,0 AS CHILDITEMORDER, NULL AS KEYITEM,NULL AS ITEMSETUNIQUEKEY,
       CHILDID, CHILDREV, CHILDDEPTH, CHILDORDER,CHILDSELECT,
       CHILD1ID, CHILD1REV, CHILD1ORDER, CHILD1SELECT, 
       CHILD2ID, CHILD2REV, CHILD2ORDER, CHILD2SELECT, 
       CHILD3ID, CHILD3REV, CHILD3ORDER, CHILD3SELECT, 
       CHILD4ID, CHILD4REV, CHILD4ORDER, CHILD4SELECT 
FROM IRV_ITEM_CONTROLS
UNION ALL
SELECT ITEMSETID,ITEMSETREV,1, 
       ROOTCONTROLID, ROOTCONTROLREV, 
       ITEMID, ITEMREV,ITEMORDER,KEYITEM,UNIQUEKEY,
       CHILDID, CHILDREV, CHILDDEPTH,CHILDORDER,CHILDSELECT,
       CHILD1ID, CHILD1REV, CHILD1ORDER, CHILD1SELECT, 
       CHILD2ID, CHILD2REV, CHILD2ORDER, CHILD2SELECT, 
       CHILD3ID, CHILD3REV, CHILD3ORDER, CHILD3SELECT, 
       CHILD4ID, CHILD4REV, CHILD4ORDER, CHILD4SELECT
FROM IRV_ITEMSET_CONTROLS;

CREATE OR REPLACE VIEW IRV_MD_FORMS_CONTROLS
AS
SELECT * 
FROM RT_FORMS_CONTROLS;

CREATE OR REPLACE VIEW IRV_FORM_REQITEMS
AS
SELECT FORMID,FORMREV,
       DECODE(SUM(I_ITEMREQUIRED)+SUM(CI_ITEMREQUIRED),0,0,1) AS HASREQUIREDITEMS,
       DECODE(SUM(I_SDVREQUIRED)+SUM(CI_SDVREQUIRED),0,0,1) AS HASSDVREQUIREDITEMS
FROM (SELECT FORMID, FORMREV, 
             FORMSECTIONORDER, SECTIONID, SECTIONREV, 
             SECTIONITEMORDER, ITEMID, ITEMREV, ITEMSET,
             NVL2(I_ITEMREQUIRED,I_ITEMREQUIRED,0) AS I_ITEMREQUIRED,
             NVL2(I_SDVREQUIRED,I_SDVREQUIRED,0) AS I_SDVREQUIRED,
             CHILDITEMID, CHILDITEMREV, CHILDITEMORDER, 
             NVL2(CI_ITEMREQUIRED,CI_ITEMREQUIRED,0) AS CI_ITEMREQUIRED, 
             NVL2(CI_SDVREQUIRED,CI_SDVREQUIRED,0) AS CI_SDVREQUIRED
      FROM RT_FORMS_CONTROLS
      GROUP BY FORMID, FORMREV, 
               FORMSECTIONORDER, SECTIONID, SECTIONREV, 
               SECTIONITEMORDER, ITEMID, ITEMREV, ITEMSET, I_ITEMREQUIRED,I_SDVREQUIRED,
               CHILDITEMID, CHILDITEMREV, CHILDITEMORDER, CI_ITEMREQUIRED,CI_SDVREQUIRED)
GROUP BY FORMID,FORMREV;


--RULES

CREATE OR REPLACE VIEW IRV_DIM_RULE
AS
SELECT RULEID,
       COUNT(*) AS RREVS,
       MIN(RULEREVISIONNUMBER) AS MINRREV, 
       MAX(RULEREVISIONNUMBER) AS MAXRREV
FROM PF_RULES
GROUP BY RULEID;

CREATE OR REPLACE VIEW IRV_CUR_RULE
AS
SELECT 1 AS RULECOUNT,
       RULEID, RULEREV, RREVS, MINRREV, MAXRREV, 
       RULEREFNAME, RULEDESCRIPTION, RULEENABLED, EVENTTYPEID, ETINITIALREVISIONNUMBER, SCRIPTTYPE, 
       HELPTEXTID, DESIGNNOTE, CTMSGTEXT, CTRULEACTION, CTRULEOPTIONS
FROM RV_CUR_RULE;


CREATE OR REPLACE VIEW IRV_DIM_RULEITEM
AS
SELECT RULEITEMID,
       COUNT(*) AS RIREVS,
       MIN(RULEITEMREVISIONNUMBER) AS MINRIREV, 
       MAX(RULEITEMREVISIONNUMBER) AS MAXRIREV
FROM PF_RULEITEM
GROUP BY RULEITEMID;

CREATE OR REPLACE VIEW IRV_CUR_RULEITEM
AS
SELECT 1 AS RULEITEMCOUNT,
       RULEITEMID, RIREVS, MINRIREV, MAXRIREV, RULEITEMREFNAME, APPLYEVENT, ACTIVE, 
       RULEID, CHAPTERID, PAGEID, SECTIONID, ITEMSETID, ITEMID, RULESETID, ITEMSETEVENTID, ITEMSETHELPID
FROM RV_CUR_RULEITEM;

--STUDYVERSION

CREATE OR REPLACE VIEW IRV_VISIT_NAME
AS
SELECT 
       CHAPTERID AS VISITID, CHAPTERREVISIONNUMBER AS VISITREV, RD.RESOURCESTRING AS VISITNAME
FROM PF_CHAPTER, RT_RESOURCEDATA RD
WHERE CHAPTERNAME = RD.RESOURCEID (+);

CREATE OR REPLACE VIEW IRV_VISIT_HELPTEXT
AS
SELECT 
       CHAPTERID AS  VISITID, CHAPTERREVISIONNUMBER AS VISITREV, RD.RESOURCESTRING AS HELPTEXT
FROM PF_CHAPTER V, RT_RESOURCEDATA RD
WHERE HELPTEXT = RD.RESOURCEID (+);

--There's one row for each visit in every studyversion plus one row for SYSFORMS

CREATE OR REPLACE VIEW IRV_VISIT_REVS
AS
SELECT 
       CR.CHAPTERID AS VISITID, CR.CHAPTERREVISIONNUMBER AS VISITREV,
       DECODE(CR.CHAPTERREVISIONNUMBER,V.MINVISITREV,1,0) AS FIRSTREV,
       DECODE(CR.CHAPTERREVISIONNUMBER,V.MAXVISITREV,1,0) AS CURRENTREV,
       CR.CHAPTERTYPE AS VISITTYPE, 
       DECODE(CR.CHAPTERTYPE,1,1,0) AS VTSUBJECTVISIT,
       DECODE(CR.CHAPTERTYPE,2,1,0) AS VTENROLLMENT,
       DECODE(CR.CHAPTERTYPE,3,1,0) AS VTSCREENING,
       DECODE(CR.CHAPTERTYPE,4,1,0) AS VTMONITOR,
       DECODE(CR.CHAPTERTYPE,5,1,0) AS VTSTATUS,
       DECODE(CR.CHAPTERTYPE,6,1,0) AS VTCOMMONCRF,
       DECODE(CR.CHAPTERTYPE,7,1,0) AS VTREGDOCS,
       DECODE(CR.CHAPTERTYPE,8,1,0) AS VTVISITREPORT,
       DECODE(CR.CHAPTERTYPE,9,1,0) AS VTCONFLICT,
       CR.CHAPTERREFNAME AS VISITREFNAME, 
       NM.VISITNAME,
       RD.RESOURCESTRING AS VISITMNEMONIC,  
       HT.HELPTEXT, CR.DESIGNNOTE
FROM RV_VISITS V,
     PF_CHAPTER CR,
     IRV_VISIT_NAME NM,
     IRV_VISIT_HELPTEXT HT,
     RT_RESOURCEDATA RD
WHERE V.VISITID = CR.CHAPTERID
AND CR.CHAPTERID = NM.VISITID
AND CR.CHAPTERREVISIONNUMBER = NM.VISITREV
AND CR.CHAPTERID = HT.VISITID
AND CR.CHAPTERREVISIONNUMBER = HT.VISITREV
AND CHAPTERMNEMONIC = RD.RESOURCEID (+);

CREATE OR REPLACE VIEW IRV_CUR_VISIT
AS
SELECT VISITID, VISITREV, 
       VISITTYPE, 
       VTSUBJECTVISIT,
       VTENROLLMENT,
       VTSCREENING,
       VTMONITOR,
       VTSTATUS,
       VTCOMMONCRF,
       VTREGDOCS,
       VTVISITREPORT,
       VTCONFLICT,
       VISITREFNAME, 
       SUBSTR(VISITNAME,1,50) AS VISITNAME,
       CASE WHEN VTCOMMONCRF = 1 AND VISITMNEMONIC = 'CCRF'
            THEN 'Common'
            ELSE SUBSTR(VISITMNEMONIC,1,10) 
       END AS VISITMNEMONIC,
       HELPTEXT, DESIGNNOTE
FROM RT_VISIT_REVS V
WHERE CURRENTREV = 1;

CREATE OR REPLACE VIEW IRV_DIM_SV_VISIT
AS
SELECT STUDYVERSIONID, VISITID, VISITREV
FROM RT_STUDYVERSION_VISITS;

CREATE OR REPLACE VIEW IRV_STUDYVERSION_VISITS1
AS
SELECT 
       VOLUMEID AS STUDYID,
       SVV.VOLUMEEDITIONID AS STUDYVERSIONID,
       VISITID,VISITREV,
       VISITREFNAME, VISITNAME, VISITMNEMONIC, 
       VISITTYPE, 
       VTSUBJECTVISIT, VTENROLLMENT, VTSCREENING, VTMONITOR, VTSTATUS, VTCOMMONCRF, VTREGDOCS, VTVISITREPORT, VTCONFLICT, 
       CHAPTERPROPERTIES AS VISITPROPERTIES,
       DECODE(BITAND(CHAPTERPROPERTIES,1),1,1,0) AS VISITSCHEDULED,
       DECODE(BITAND(CHAPTERPROPERTIES,2),2,1,0) AS VISITOPTIONAL,
       DECODE(BITAND(CHAPTERPROPERTIES,4),4,1,0) AS VISITSREPEATING,
       DECODE(BITAND(CHAPTERPROPERTIES,8),8,1,0) AS VISITDYNAMIC,
       DECODE(BITAND(CHAPTERPROPERTIES,16),16,1,0) AS VISITRELATION,
       HELPTEXT, VR.DESIGNNOTE,
       CHAPTERORDER AS VISITORDER,STARTHOURS AS STARTHOURSFROMPREVIOUS,MAXTABS
FROM PF_VECHAPTER SVV,
     PF_VOLUMEEDITION SV,
     IRV_VISIT_REVS VR
WHERE SVV.VOLUMEEDITIONID = SV.VOLUMEEDITIONID
AND SVV.CHAPTERID = VR.VISITID
AND SVV.CHAPTERREVISIONNUMBER = VR.VISITREV;

CREATE OR REPLACE VIEW IRV_STUDYVERSION_VISITS
AS
SELECT 
       SVV.STUDYVERSIONID,SVV.VISITID, SVV.VISITREV, 
       VISITREFNAME, 
       SUBSTR(VISITNAME,1,50) AS VISITNAME,
       CASE WHEN VTCOMMONCRF = 1 AND VISITMNEMONIC = 'CCRF'
            THEN 'Common'
            ELSE SUBSTR(VISITMNEMONIC,1,10) 
       END AS VISITMNEMONIC,
       VISITTYPE, VTSUBJECTVISIT, VTENROLLMENT, VTSCREENING, VTMONITOR, VTSTATUS, VTCOMMONCRF, VTREGDOCS, VTVISITREPORT, VTCONFLICT, 
       VISITPROPERTIES, VISITSCHEDULED, VISITOPTIONAL, VISITSREPEATING, VISITDYNAMIC, VISITRELATION, 
       HELPTEXT, DESIGNNOTE, VISITORDER, STARTHOURSFROMPREVIOUS, 
       STARTHOURSFROMENROLL,
       MAXTABS 
FROM IRV_STUDYVERSION_VISITS1 SVV,
     (SELECT STUDYVERSIONID,
             VISITID,VISITREV,
             SUM(STARTHOURSFROMPREVIOUS) OVER (PARTITION BY STUDYVERSIONID ORDER BY VISITORDER) STARTHOURSFROMENROLL
      FROM IRV_STUDYVERSION_VISITS1
      WHERE VISITSCHEDULED = 1) SH
WHERE SVV.STUDYVERSIONID = SH.STUDYVERSIONID (+)
AND SVV.VISITID = SH.VISITID (+)
AND SVV.VISITREV = SH.VISITREV (+);

CREATE OR REPLACE VIEW IRV_DIM_SV_FORM
AS
SELECT SVV.STUDYVERSIONID, SVV.VISITID, SVV.VISITREV, SVF.PAGEID AS FORMID, SVF.PAGEREVISIONNUMBER AS FORMREV
FROM RT_STUDYVERSION_VISITS SVV,
     PF_VECHAPTERPAGE SVF,
     (SELECT S.VOLUMEEDITIONID AS STUDYVERSIONID, S.PAGEID AS FORMID, S.PAGEREVISIONNUMBER AS FORMREV, count(*) SVF_ROWS FROM PF_VECHAPTERPAGE S,PF_CHAPTER_CUR V
      WHERE S.CHAPTERID = V.CHAPTERID AND V.CHAPTERTYPE = 6 GROUP BY S.VOLUMEEDITIONID,S.PAGEID,S.PAGEREVISIONNUMBER) SVCF
WHERE SVF.VOLUMEEDITIONID = SVV.STUDYVERSIONID
AND SVF.CHAPTERID = SVV.VISITID
AND SVF.CHAPTERREVISIONNUMBER = SVV.VISITREV
AND SVF.VOLUMEEDITIONID = SVCF.STUDYVERSIONID (+)
AND SVF.PAGEID = SVCF.FORMID (+)
AND (SVV.VISITTYPE = 6  OR (SVV.VISITTYPE!=6 AND NVL2(SVCF.FORMID,1,0)=0))
;

CREATE OR REPLACE VIEW IRV_STUDYVERSION_FORMS
AS
with SVF as
(SELECT IR.STUDYID, 
       SVV.STUDYVERSIONID, 
       SVV.VISITID, SVV.VISITREV, 
       SVF.PAGEID AS FORMID, SVF.PAGEREVISIONNUMBER AS FORMREV, 
       F.FORMREFNAME, F.FORMNAME, F.FORMMNEMONIC, 
       F.FORMNOTE, F.FORMTYPE, F.FORMHELPURL, F.QUESTIONWIDTH, F.CONTROLWIDTH, F.REPEATINGFORM, F.FORMUNIQUEKEY, F.FORMDESIGNNOTE,
       SVF.PAGEORDER AS FORMORDER, SVF.DYNAMIC AS DYNAMICFORM, VTCOMMONCRF AS COMMONFORM,
       NVL2(SVF.ALTPAGEID,1,0) AS ALTFORM, SVF.ALTPAGEID AS ALTFORMID, SVF.ALTPAGEREVISIONNUMBER AS ALTFORMREV, 
       NVL2(SVF.ASSOCCHAPTERID, 1,0) AS ASSOCVISIT,SVF.ASSOCCHAPTERID AS ASSOCVISITID, SVF.ASSOCCHAPTERREVISIONNUMBER AS ASSOCVISITREV,
       NVL2(SVCF.FORMID,1,0) AS FORMINCOMMONVISIT
     FROM RT_INFORMREP IR,
          PF_VECHAPTERPAGE SVF,
          IRV_FORM_REVS F,
          IRV_STUDYVERSION_VISITS SVV,
          (SELECT S.VOLUMEEDITIONID AS STUDYVERSIONID, S.PAGEID AS FORMID, S.PAGEREVISIONNUMBER AS FORMREV, count(*) SVF_ROWS 
           FROM PF_VECHAPTERPAGE S,PF_CHAPTER_CUR V
           WHERE S.CHAPTERID = V.CHAPTERID AND V.CHAPTERTYPE = 6 GROUP BY S.VOLUMEEDITIONID,S.PAGEID,S.PAGEREVISIONNUMBER) SVCF
     WHERE SVF.PAGEID = F.FORMID 
           AND SVF.PAGEREVISIONNUMBER = F.FORMREV
           AND SVF.VOLUMEEDITIONID = SVV.STUDYVERSIONID
           AND SVF.CHAPTERID = SVV.VISITID
           AND SVF.CHAPTERREVISIONNUMBER = SVV.VISITREV
           AND SVF.VOLUMEEDITIONID = SVCF.STUDYVERSIONID (+)
           AND SVF.PAGEID = SVCF.FORMID (+)
           AND (SVV.VISITTYPE = 6  OR (SVV.VISITTYPE!=6 AND NVL2(SVCF.FORMID,1,0)=0)))
SELECT STUDYID,
       STUDYVERSIONID, VISITID, VISITREV, FORMID, FORMREV, 
       FORMREFNAME, 
       SUBSTR(FORMNAME,1,50) AS FORMNAME,
       SUBSTR(FORMMNEMONIC,1,10) AS FORMMNEMONIC,
       FORMNOTE, FORMTYPE, FORMHELPURL, QUESTIONWIDTH, CONTROLWIDTH, REPEATINGFORM, COMMONFORM,FORMUNIQUEKEY, FORMDESIGNNOTE, 
       FORMORDER, DYNAMICFORM, ALTFORM AS EXPECTINGALTFORM,0 as ALTFORM, ALTFORMID, ALTFORMREV, ASSOCVISIT, ASSOCVISITID, ASSOCVISITREV,FORMINCOMMONVISIT
FROM SVF
UNION ALL
SELECT STUDYID,STUDYVERSIONID, VISITID, VISITREV, ALTFORMID, ALTFORMREV,  
       AFR.FORMREFNAME, 
       SUBSTR(AFR.FORMNAME,1,50) AS FORMNAME,
       SUBSTR(AFR.FORMMNEMONIC,1,10) AS FORMMNEMONIC,
       AFR.FORMNOTE, AFR.FORMTYPE, AFR.FORMHELPURL, AFR.QUESTIONWIDTH, AFR.CONTROLWIDTH, AFR.REPEATINGFORM, COMMONFORM,AFR.FORMUNIQUEKEY, AFR.FORMDESIGNNOTE, 
       FORMORDER, DYNAMICFORM, 0 AS EXPECTINGALTFORM,1 as ALTFORM, SVF.FORMID, SVF.FORMREV,ASSOCVISIT, ASSOCVISITID, ASSOCVISITREV,FORMINCOMMONVISIT
FROM SVF,
     IRV_FORM_REVS AFR
WHERE ALTFORM = 1
AND SVF.ALTFORMID = AFR.FORMID
AND SVF.ALTFORMREV = AFR.FORMREV;

CREATE OR REPLACE VIEW IRV_SITE_STUDYVERSION_TIMES
AS
SELECT 
       SVE.SITEID,VOLUMEEDITIONID AS STUDYVERSIONID,REVISIONNUMBER AS SSVREV,PFTIMESTAMP AS SSVTIME,HISTORICALORDER AS SSVHIST,
       SITEVOLUMEEDITIONACCEPTDATE AS SITESTUDYVERSIONACCEPTDATE,
       DECODE(MAXSTUDYVERSIONID,VOLUMEEDITIONID,1,0) AS CURRENTSSV
FROM PF_REVISIONHISTORY REVS,
     PF_SITEVOLUMEEDITION SVE,
     (SELECT SITEID,MAX(VOLUMEID) AS STUDYID,MAX(VOLUMEEDITION) AS STUDYREV,COUNT(*) AS SSVCOUNT,
       MIN(SSV.VOLUMEEDITIONID) AS MINSTUDYVERSIONID, 
       MIN(SVEREVISIONNUMBER) AS MINSSVREV, 
       MAX(SSV.VOLUMEEDITIONID) AS MAXSTUDYVERSIONID, 
       MAX(SVEREVISIONNUMBER) AS MAXSSVREV
      FROM PF_SITEVOLUMEEDITION SSV, PF_VOLUMEEDITION SV
      WHERE SSV.VOLUMEEDITIONID = SV.VOLUMEEDITIONID
      GROUP BY SITEID) SSV
WHERE REVS.DBUID = SVE.SVEID
AND REVS.REVISIONNUMBER = SVE.SVEREVISIONNUMBER
AND SVE.SITEID = SSV.SITEID;

--SUBJECT

CREATE OR REPLACE VIEW IRV_DIM_SUBJECT
AS
SELECT PATIENTID AS SUBJECTID,
       COUNT(*) AS SUBJECTREVS,
       MIN(PATIENTREVISIONNUMBER) AS MINSUBJREV, 
       MAX(PATIENTREVISIONNUMBER) AS MAXSUBJREV
FROM PF_PATIENT
GROUP BY PATIENTID;

-- DROPOUT REASON

CREATE OR REPLACE VIEW IRV_SUBJECT_DROPOUT_REASON
AS
SELECT
    IC.SUBJECTKEYID AS SUBJECTID,
	SUBSTR(MAX(CASE WHEN CD.STRVALUE = CUSTOMREASON.REASONVAL THEN
		          CUSTOMREASON.REASONTXT
		     WHEN CD.STRVALUE = '!pf!'||KNOWNREASON.DBUID THEN
		          KNOWNREASON.REASONTXT
		     END),1,255) AS DROPOUTREASON
FROM
	PF_ENTITYMAPPING EMSCFRM,
	PF_ENTITYMAPPING EMSCREASONCTL,
    PF_CONTROLDATA CD,
    PF_ITEMCONTEXT IC,
	(
	    SELECT
		    DBUID,
			CASE WHEN EMI.ENTITYID = 'PF_SC_CRITIERIA' THEN 'Did not meet criteria'
			     WHEN EMI.ENTITYID = 'PF_SC_AE' THEN 'Adverse experience'
			     WHEN EMI.ENTITYID = 'PF_SC_ALE' THEN 'Adverse laboratory experience'
			     WHEN EMI.ENTITYID = 'PF_SC_PATIENTDECISION' THEN 'Patient decision' 
			     WHEN EMI.ENTITYID = 'PF_SC_PHYSICIANDECISION' THEN 'Physician decision' 
			     WHEN EMI.ENTITYID = 'PF_SC_SPONSORDECISION' THEN 'Sponsor decision' 
			     WHEN EMI.ENTITYID = 'PF_SC_OTHER' THEN 'Other' 
			     WHEN EMI.ENTITYID = 'PF_SC_LOST' THEN 'Lost to follow-up' 
			     WHEN EMI.ENTITYID = 'PF_SC_DEATH' THEN 'Death'
			END AS REASONTXT
		FROM
		    PF_ENTITYMAPPING EMI
		WHERE (ENTITYID = 'PF_SC_CRITIERIA' 
		       OR ENTITYID = 'PF_SC_AE'
		       OR ENTITYID = 'PF_SC_ALE'
		       OR ENTITYID = 'PF_SC_PATIENTDECISION'
		       OR ENTITYID = 'PF_SC_PHYSICIANDECISION'
		       OR ENTITYID = 'PF_SC_SPONSORDECISION'
		       OR ENTITYID = 'PF_SC_OTHER'
		       OR ENTITYID = 'PF_SC_LOST'
		       OR ENTITYID = 'PF_SC_DEATH')
	) KNOWNREASON,
    (SELECT
   	    SUBSTR(EM.ENTITYID,17,255) REASONVAL,
   	    RD.RESOURCESTRING AS REASONTXT
   	 FROM
   	    PF_ENTITYMAPPING EM,
            RT_RESOURCEDATA RD
   	 WHERE
   	    RD.RESOURCEID = EM.DBUID AND
   	    EM.ENTITYID LIKE 'PF_SC_REASONCTL_%'
	) CUSTOMREASON
WHERE
    IC.CONTEXTID            = CD.CONTEXTID 				AND
	CD.AUDITORDER 			= (SELECT MAXAUDITORDER FROM RV_DIM_ITEMDATA ITMD WHERE ITMD.CONTEXTID = CD.CONTEXTID) AND
	IC.PAGEID 				= EMSCFRM.DBUID 			AND
	CD.CONTROLID 			= EMSCREASONCTL.DBUID 		AND
	CD.STRVALUE 			= '!pf!'||KNOWNREASON.DBUID (+)		AND
	CD.STRVALUE 			= CUSTOMREASON.REASONVAL (+)		AND
	EMSCREASONCTL.ENTITYID  = 'PF_SC_REASONCTL' 		AND
	EMSCFRM.ENTITYID  		= '7314A6A5-316E-11D2-8F9A-00A0C977C66A'  
GROUP BY
    IC.SUBJECTKEYID;




CREATE OR REPLACE VIEW IRV_SUBJECT_STATE_CHANGES
AS
WITH SST AS
      (SELECT SUBJECTID,SUBJECTREV,SUBJECTSTATE,SUBJTIME AS SUBJECTSTATETIME,
             LAG(SUBJECTSTATE) OVER (PARTITION BY SUBJECTID ORDER BY SUBJECTREV) AS PREVSUBJECTSTATE,
             LAG(SUBJTIME) OVER (PARTITION BY SUBJECTID ORDER BY SUBJECTREV) AS PREVSUBJECTSTATETIME
	   FROM RV_SUBJECT_REVS)
SELECT SUBJECTID,SUBJECTREV,SUBJECTSTATE,SUBJECTSTATETIME,
       PREVSUBJECTSTATE,PREVSUBJECTSTATETIME,
       LEAD(SUBJECTSTATE) OVER (PARTITION BY SUBJECTID ORDER BY SUBJECTREV) AS NEXTSUBJECTSTATE,
       LEAD(SUBJECTSTATETIME) OVER (PARTITION BY SUBJECTID ORDER BY SUBJECTREV) AS NEXTSUBJECTSTATETIME
FROM SST
WHERE PREVSUBJECTSTATE IS NULL OR SUBJECTSTATE != PREVSUBJECTSTATE;


CREATE OR REPLACE VIEW IRV_CUR_SUBJECT
AS
SELECT 1 AS SUBJECTCOUNT,
       SUBJECTID, SUBJECTREV, 
       SUBSTR(SUBJECTNUMBERSTR,1,20) AS SUBJECTNUMBERSTR, 
       SUBJHIST, SUBJTIME, USERID, TRANSACTIONID, 
       S.SITEID, ST.SITEREV, 
       SVE.VOLUMEEDITIONID as STUDYVERSIONID,
       SUBJECTINITIALS, 
       SUBJECTDOB, SUBJECTDOBVALIDMAP, SUBJECTSCREENINGDATE, SUBJECTSCREENINGDATEVALIDMAP, 
       (SELECT SUBJECTSTATETIME FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND NEXTSUBJECTSTATE IS NULL) AS CURSUBJECTSTATUSTIME,
       CASE SUBJECTSTATE 
            WHEN 1 THEN 'Screened'
            WHEN 2 THEN 'Screening Failure'
            WHEN 3 THEN 'Enrollment Failure'
            WHEN 4 THEN 'Enrolled'
            WHEN 5 THEN 'Randomized'
            WHEN 6 THEN 'Completed'
            WHEN 7 THEN 'Dropped Out'
       END AS SUBJECTSTATETEXT, 
       SUBJECTSTATE,
       SDVSELECTEDSTATE,
       SUBJECTSCREENED,SUBJECTEVERSCREENED,MINSCREEN,
       (SELECT MAX(SUBJECTSTATETIME) FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND SSC.SUBJECTSTATE = 1) AS MAXSCREEN,
       SUBJECTSCREENFAIL, SUBJECTEVERSCREENFAIL, MINSCREENFAIL, 
       (SELECT MAX(SUBJECTSTATETIME) FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND SSC.SUBJECTSTATE = 2) AS MAXSCREENFAIL,
       SUBJECTSCREENFAILTEXT, 
       SUBJECTENROLLFAIL, SUBJECTEVERENROLLFAIL, MINENROLLFAIL, 
       (SELECT MAX(SUBJECTSTATETIME) FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND SSC.SUBJECTSTATE = 3) AS MAXENROLLFAIL,
       SUBJECTENROLLFAILTEXT, 
       SUBJECTENROLLED, SUBJECTEVERENROLLED, SUBJECTENROLLDATE, 
       (SELECT MAX(SUBJECTSTATETIME) FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND SSC.SUBJECTSTATE = 4) AS MAXENROLLED,
       SUBJECTENROLLOVERRIDETEXT, 
       SUBJECTRANDOMIZED AS SUBJECTRAMDOMIZED, SUBJECTEVERRANDOMIZED AS SUBJECTEVERRAMDOMIZED, MINRANDOMIZED, 
       (SELECT MAX(SUBJECTSTATETIME) FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND SSC.SUBJECTSTATE = 5) AS MAXRANDOMIZED,
       SUBJECTCOMPLETED, SUBJECTEVERCOMPLETED, MINCOMPLETED, 
       DECODE(SUBJECTSTATE,6,(SELECT MAX(SUBJECTSTATETIME) FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND SSC.SUBJECTSTATE = 6),NULL) AS MAXCOMPLETED,
       SUBJECTINCOMPLETE, SUBJECTEVERINCOMPLETE,MINNOTCOMPLETED,
       DECODE(SUBJECTSTATE,7,(SELECT MAX(SUBJECTSTATETIME) FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND SSC.SUBJECTSTATE = 7),NULL) AS MAXNOTCOMPLETED,
       BOOKSIGNED, BOOKFROZEN, BOOKLOCKED, BOOKSDVREADY,
       COUNTBOOKSIGNED, COUNTBOOKFROZEN, COUNTBOOKLOCKED, COUNTBOOKSDVREADY
FROM RT_SUBJECT S, PF_SITEVOLUMEEDITION_CUR SVE,
(select 1 AS SDVSELECTEDSTATE, PATIENTID, SITEID FROM DCV_SVSUBJECTPOOL_CUR WHERE
POOLNUM > 0 AND POOLNUM <> 99) SP,
RT_SITE ST
WHERE S.SITEID = SVE.SITEID
AND S.SITEID = ST.SITEID
AND S.SITEID = SP.SITEID(+)
AND S.SUBJECTID = SP.PATIENTID(+);


CREATE OR REPLACE VIEW IRV_CUR_SUBJECT_DIM
AS
SELECT SUBJECTID, SUBJECTREV,
       SUBSTR(SUBJECTNUMBERSTR,1,20) AS SUBJECTNUMBERSTR,
       SUBJHIST, SUBJTIME, USERID, TRANSACTIONID,
       S.SITEID, ST.SITEREV, 
       SVE.volumeeditionid as STUDYVERSIONID, 
       SUBJECTINITIALS,
       SUBJECTDOB, SUBJECTDOBVALIDMAP, SUBJECTSCREENINGDATE, SUBJECTSCREENINGDATEVALIDMAP,
       (SELECT SUBJECTSTATETIME FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND NEXTSUBJECTSTATE IS NULL) AS CURSUBJECTSTATUSTIME,
       CASE SUBJECTSTATE
            WHEN 1 THEN 'Screened'
            WHEN 2 THEN 'Screening Failure'
            WHEN 3 THEN 'Enrollment Failure'
            WHEN 4 THEN 'Enrolled'
            WHEN 5 THEN 'Randomized'
            WHEN 6 THEN 'Completed'
            WHEN 7 THEN 'Dropped Out'
       END AS SUBJECTSTATETEXT,
       SUBJECTSTATE,       
       MINSCREEN,
       (SELECT MAX(SUBJECTSTATETIME) FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND SSC.SUBJECTSTATE = 1) AS MAXSCREEN,
       MINSCREENFAIL,
       (SELECT MAX(SUBJECTSTATETIME) FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND SSC.SUBJECTSTATE = 2) AS MAXSCREENFAIL,
       SUBJECTSCREENFAILTEXT,
       MINENROLLFAIL,
       (SELECT MAX(SUBJECTSTATETIME) FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND SSC.SUBJECTSTATE = 3) AS MAXENROLLFAIL,
       SUBJECTENROLLFAILTEXT,
       SUBJECTENROLLDATE,
       (SELECT MAX(SUBJECTSTATETIME) FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND SSC.SUBJECTSTATE = 4) AS MAXENROLLED,
       SUBJECTENROLLOVERRIDETEXT,
       MINRANDOMIZED,
       (SELECT MAX(SUBJECTSTATETIME) FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND SSC.SUBJECTSTATE = 5) AS MAXRANDOMIZED,
       MINCOMPLETED,
       DECODE(SUBJECTSTATE,6,(SELECT MAX(SUBJECTSTATETIME) FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND SSC.SUBJECTSTATE = 6),NULL) AS MAXCOMPLETED,
       MINNOTCOMPLETED,
       DECODE(SUBJECTSTATE,7,(SELECT MAX(SUBJECTSTATETIME) FROM IRV_SUBJECT_STATE_CHANGES SSC WHERE S.SUBJECTID = SSC.SUBJECTID AND SSC.SUBJECTSTATE = 7),NULL) AS MAXNOTCOMPLETED,
       BOOKSIGNED, BOOKFROZEN, BOOKLOCKED, BOOKSDVREADY
FROM RT_SUBJECT S, PF_SITEVOLUMEEDITION_CUR SVE,RT_SITE ST
where S.SITEID=SVE.SITEID
AND S.SITEID = ST.SITEID;


CREATE OR REPLACE VIEW IRV_SUBJ_ROLLUP_SITES
AS
SELECT 1 AS SITE,
       SITEID,
       COUNT(*) AS SUBJECTS,
       SUM(SUBJECTSCREENED) AS SUBJECTSSCREENED,
       SUM(SUBJECTEVERSCREENED) AS SUBJECTSEVERSCREENED,
       SUM(SUBJECTSCREENFAIL) AS SUBJECTSSCREENFAIL,
       SUM(SUBJECTEVERSCREENFAIL) AS SUBJECTSEVERSCREENFAIL,
       SUM(SUBJECTENROLLFAIL) AS SUBJECTSENROLLFAIL,
       SUM(SUBJECTEVERENROLLFAIL) AS SUBJECTSEVERENROLLFAIL,
       SUM(SUBJECTENROLLED) AS SUBJECTSENROLLED,
       SUM(SUBJECTEVERENROLLED) AS SUBJECTSEVERENROLLED,
       SUM(SUBJECTRANDOMIZED) AS SUBJECTSRANDOMIZED,
       SUM(SUBJECTEVERRANDOMIZED) AS SUBJECTSEVERRANDOMIZED,
       SUM(SUBJECTCOMPLETED) AS SUBJECTSCOMPLETED,
       SUM(SUBJECTEVERCOMPLETED) AS SUBJECTSEVERCOMPLETED,
       SUM(SUBJECTINCOMPLETE) AS SUBJECTSINCOMPLETE,
       SUM(SUBJECTEVERINCOMPLETE) AS SUBJECTSEVERINCOMPLETE,
       SUM(COUNTBOOKSIGNED) AS COUNTBOOKSIGNED,
       SUM(COUNTBOOKFROZEN) AS COUNTBOOKFROZEN,
       SUM(COUNTBOOKLOCKED) AS COUNTBOOKLOCKED,
       SUM(COUNTBOOKSDVREADY) AS COUNTBOOKSDVREADY,
       MIN(BOOKSIGNED) AS FIRSTBOOKSIGNED,
       MAX(BOOKSIGNED) AS LASTBOOKSIGNED,
       MIN(BOOKFROZEN) AS FIRSTBOOKFROZEN,
       MAX(BOOKFROZEN) AS LASTBOOKFROZEN,
       MIN(BOOKLOCKED) AS FIRSTBOOKLOCKED,
       MAX(BOOKLOCKED) AS LASTBOOKLOCKED,
       MIN(BOOKSDVREADY) AS FIRSTBOOKSDVREADY,
       MAX(BOOKSDVREADY) AS LASTBOOKSDVREADY
FROM RT_SUBJECT S
GROUP BY SITEID;

CREATE OR REPLACE VIEW IRV_SUBJ_ROLLUP_STUDYVERSIONS
AS
SELECT 1 AS STUDYVERSION,
       SVE.VOLUMEEDITIONID AS STUDYVERSIONID,
       COUNT(*) AS SUBJECTS,
       SUM(SUBJECTSCREENED) AS SUBJECTSSCREENED,
       SUM(SUBJECTEVERSCREENED) AS SUBJECTSEVERSCREENED,
       SUM(SUBJECTSCREENFAIL) AS SUBJECTSSCREENFAIL,
       SUM(SUBJECTEVERSCREENFAIL) AS SUBJECTSEVERSCREENFAIL,
       SUM(SUBJECTENROLLFAIL) AS SUBJECTSENROLLFAIL,
       SUM(SUBJECTEVERENROLLFAIL) AS SUBJECTSEVERENROLLFAIL,
       SUM(SUBJECTENROLLED) AS SUBJECTSENROLLED,
       SUM(SUBJECTEVERENROLLED) AS SUBJECTSEVERENROLLED,
       SUM(SUBJECTRANDOMIZED) AS SUBJECTSRANDOMIZED,
       SUM(SUBJECTEVERRANDOMIZED) AS SUBJECTSEVERRANDOMIZED,
       SUM(SUBJECTCOMPLETED) AS SUBJECTSCOMPLETED,
       SUM(SUBJECTEVERCOMPLETED) AS SUBJECTSEVERCOMPLETED,
       SUM(SUBJECTINCOMPLETE) AS SUBJECTSINCOMPLETE,
       SUM(SUBJECTEVERINCOMPLETE) AS SUBJECTSEVERINCOMPLETE,
       SUM(COUNTBOOKSIGNED) AS COUNTBOOKSIGNED,
       SUM(COUNTBOOKFROZEN) AS COUNTBOOKFROZEN,
       SUM(COUNTBOOKLOCKED) AS COUNTBOOKLOCKED,
       SUM(COUNTBOOKSDVREADY) AS COUNTBOOKSDVREADY,
       MIN(BOOKSIGNED) AS FIRSTBOOKSIGNED,
       MAX(BOOKSIGNED) AS LASTBOOKSIGNED,
       MIN(BOOKFROZEN) AS FIRSTBOOKFROZEN,
       MAX(BOOKFROZEN) AS LASTBOOKFROZEN,
       MIN(BOOKLOCKED) AS FIRSTBOOKLOCKED,
       MAX(BOOKLOCKED) AS LASTBOOKLOCKED,
       MIN(BOOKSDVREADY) AS FIRSTBOOKSDVREADY,
       MAX(BOOKSDVREADY) AS LASTBOOKSDVREADY
FROM RT_SUBJECT S, PF_SITEVOLUMEEDITION SVE
WHERE S.SITEID = SVE.SITEID
GROUP BY SVE.VOLUMEEDITIONID;


CREATE OR REPLACE VIEW IRV_SUBJ_ROLLUP_STUDY
AS
SELECT 1 AS STUDY,
       RIR.STUDYID,
       COUNT(*) AS SUBJECTS,
       SUM(SUBJECTSCREENED) AS SUBJECTSSCREENED,
       SUM(SUBJECTEVERSCREENED) AS SUBJECTSEVERSCREENED,
       SUM(SUBJECTSCREENFAIL) AS SUBJECTSSCREENFAIL,
       SUM(SUBJECTEVERSCREENFAIL) AS SUBJECTSEVERSCREENFAIL,
       SUM(SUBJECTENROLLFAIL) AS SUBJECTSENROLLFAIL,
       SUM(SUBJECTEVERENROLLFAIL) AS SUBJECTSEVERENROLLFAIL,
       SUM(SUBJECTENROLLED) AS SUBJECTSENROLLED,
       SUM(SUBJECTEVERENROLLED) AS SUBJECTSEVERENROLLED,
       SUM(SUBJECTRANDOMIZED) AS SUBJECTSRANDOMIZED,
       SUM(SUBJECTEVERRANDOMIZED) AS SUBJECTSEVERRANDOMIZED,
       SUM(SUBJECTCOMPLETED) AS SUBJECTSCOMPLETED,
       SUM(SUBJECTEVERCOMPLETED) AS SUBJECTSEVERCOMPLETED,
       SUM(SUBJECTINCOMPLETE) AS SUBJECTSINCOMPLETE,
       SUM(SUBJECTEVERINCOMPLETE) AS SUBJECTSEVERINCOMPLETE,
       SUM(COUNTBOOKSIGNED) AS COUNTBOOKSIGNED,
       SUM(COUNTBOOKFROZEN) AS COUNTBOOKFROZEN,
       SUM(COUNTBOOKLOCKED) AS COUNTBOOKLOCKED,
       SUM(COUNTBOOKSDVREADY) AS COUNTBOOKSDVREADY,
       MIN(BOOKSIGNED) AS FIRSTBOOKSIGNED,
       MAX(BOOKSIGNED) AS LASTBOOKSIGNED,
       MIN(BOOKFROZEN) AS FIRSTBOOKFROZEN,
       MAX(BOOKFROZEN) AS LASTBOOKFROZEN,
       MIN(BOOKLOCKED) AS FIRSTBOOKLOCKED,
       MAX(BOOKLOCKED) AS LASTBOOKLOCKED,
       MIN(BOOKSDVREADY) AS FIRSTBOOKSDVREADY,
       MAX(BOOKSDVREADY) AS LASTBOOKSDVREADY
FROM RT_SUBJECT S, RT_INFORMREP RIR
GROUP BY RIR.STUDYID;


--SUBJECTVISITS

CREATE OR REPLACE VIEW IRV_DIM_SUBJECTVISIT
AS
SELECT SUBJECTCHAPTERID AS SUBJECTVISITID,
       SUBJECTKEYID AS SUBJECTID,CHAPTERID AS VISITID,CHAPTERINDEX AS VISITINDEX,
       --COUNT(*) AS SVREVS,
       --MIN(SUBJECTCHAPTERREVISIONNUMBER) AS MINSVREV, 
       --MAX(SUBJECTCHAPTERREVISIONNUMBER) AS MAXSVREV
       SUBJECTCHAPTERREVISIONNUMBER AS MAXSVREV
FROM PF_SUBJECTVECHAPTER_CUR
--GROUP BY SUBJECTCHAPTERID,SUBJECTKEYID,CHAPTERID,CHAPTERINDEX;
;
CREATE OR REPLACE VIEW IRV_CSV_ROLLUP_SUBJECTS
AS
SELECT 1 AS SUBJECT,
       SUBJECTID,
       COUNT(*) AS SUBJECTVISITS,
       MIN(VISIT_FIRST_ENTRY) AS SUBJECT_FIRST_ENTRY, 
       MAX(VISIT_LAST_ENTRY) AS SUBJECT_LAST_ENTRY, 
       MIN(ACTUALDATETIME) AS FIRSTDOV, 
       MAX(ACTUALDATETIME) AS LASTDOV, 
       COALESCE(SUM(DELETED),0) AS VISITSDELETED
FROM RT_SUBJECTVISIT CSV
GROUP BY SUBJECTID;

CREATE OR REPLACE VIEW IRV_CSV_ROLLUP_SITES
AS
SELECT 1 AS SITE,
       SITEID,
       COUNT(*) AS SITEVISITS,
       MIN(VISIT_FIRST_ENTRY) AS SITE_FIRST_ENTRY, 
       MAX(VISIT_LAST_ENTRY) AS SITE_LAST_ENTRY, 
       MIN(ACTUALDATETIME) AS FIRSTDOV, 
       MAX(ACTUALDATETIME) AS LASTDOV, 
       COALESCE(SUM(DELETED),0) AS VISITSDELETED
FROM RT_SUBJECTVISIT CSV
GROUP BY SITEID;

CREATE OR REPLACE VIEW IRV_CSV_ROLLUP_STUDYVERSIONS
AS
SELECT 1 AS STUDYVERSION,
       SVE.VOLUMEEDITIONID as STUDYVERSIONID,
       COUNT(*) AS SVVISITS,
       MIN(CSV.VISIT_FIRST_ENTRY) AS SV_FIRST_ENTRY, 
       MAX(CSV.VISIT_LAST_ENTRY) AS SV_LAST_ENTRY, 
       MIN(CSV.ACTUALDATETIME) AS FIRSTDOV, 
       MAX(CSV.ACTUALDATETIME) AS LASTDOV, 
       COALESCE(SUM(CSV.DELETED),0) AS VISITSDELETED
FROM RT_SUBJECTVISIT CSV, PF_SITEVOLUMEEDITION_CUR SVE
WHERE CSV.SITEID=SVE.SITEID
GROUP BY SVE.VOLUMEEDITIONID;

CREATE OR REPLACE VIEW IRV_CSV_ROLLUP_STUDY
AS
SELECT 1 AS STUDY,
       RIR.STUDYID,
       COUNT(*) AS SVVISITS,
       MIN(VISIT_FIRST_ENTRY) AS STUDY_FIRST_ENTRY, 
       MAX(VISIT_LAST_ENTRY) AS STUDY_LAST_ENTRY, 
       MIN(ACTUALDATETIME) AS FIRSTDOV, 
       MAX(ACTUALDATETIME) AS LASTDOV, 
       COALESCE(SUM(DELETED),0) AS VISITSDELETED
FROM RT_SUBJECTVISIT CSV, RT_INFORMREP RIR
GROUP BY RIR.STUDYID;

--SUBJECTFORMS

CREATE OR REPLACE VIEW IRV_ACTIVATED_FORMS 
AS 
SELECT SUBJECTVISITID,                                                                           
     SUBJECTID,                                                                                
     SITEID,                                                                                   
     VISITID,                                                                                  
     VISITINDEX,                                                                               
     FORMID,                                                                                   
     FORMREV,                                                                                  
     FORMINDEX,                                                                                
     DOV,                                                                                      
     VISITDELETED,                                                                             
     INFORMACTIVATIONTIME,                                                                     
     FORMTYPE,                                                                                 
     AFSOURCE,                                                                                 
     HISTORICALORDER,                                                                          
     USERID,                                                                                   
     PFTIMESTAMP,                                                                              
     TRANSACTIONID,                                                                            
     REASON,                                                                                   
     ACTION,                                                                                   
     STATEHIST,                                                                                
     ORIGINALSTATE,                                                                            
     FORMHISTORYID,                                                                            
     FORMHISTORYREV,                                                                           
     CURFORMHISTORYID,                                                                         
     CURFORMHISTORYREV,                                                                        
     STARTEDSTATE,                                                                             
     FMINSTARTEDSTATE,                                                                         
     FMAXSTARTEDSTATE,                                                                         
     SDVREADYSTATE,                                                                            
     FMINSDVREADYSTATE,                                                                        
     FMAXSDVREADYSTATE,                                                                        
     SDVPARTIALSTATE,                                                                          
     FMINSDVPARTIALSTATE,                                                                      
     FMAXSDVPARTIALSTATE,                                                                      
     SDVCOMPLETESTATE,                                                                         
     FMINSDVCOMPLETESTATE,                                                                     
     FMAXSDVCOMPLETESTATE,                                                                     
     SDVSELECTEDSTATE,                                                                         
     FMINSDVSELECTEDSTATE,                                                                     
     FMAXSDVSELECTEDSTATE,                                                                     
     LOCKEDSTATE,                                                                              
     FMINLOCKEDSTATE,                                                                          
     FMAXLOCKEDSTATE,                                                                          
     FROZENSTATE,                                                                              
     FMINFROZENSTATE,                                                                          
     FMAXFROZENSTATE,                                                                          
     SIGNEDSTATE,                                                                              
     FMINSIGNEDSTATE,                                                                          
     FMAXSIGNEDSTATE,                                                                          
     COMPLETESTATE,                                                                            
     FMINCOMPLETESTATE,                                                                        
     FMAXCOMPLETESTATE,                                                                        
     HASQUERIESSTATE,                                                                          
     FMINHASQUERIESSTATE,                                                                      
     FMAXHASQUERIESSTATE,                                                                      
     HASCOMMENTSSTATE,                                                                         
     FMINHASCOMMENTSSTATE,                                                                     
     FMAXHASCOMMENTSSTATE,                                                                     
     HASDATASTATE,                                                                             
     FMINHASDATASTATE,                                                                         
     FMAXHASDATASTATE,                                                                         
     MISSINGITEMSSTATE,                                                                        
     FMINMISSINGITEMSSTATE,                                                                    
     FMAXMISSINGITEMSSTATE,                                                                    
     NOTDONESTATE,                                                                             
     FMINNOTDONESTATE,                                                                         
     FMAXNOTDONESTATE,                                                                         
     DELETEDSTATE,                                                                             
     FMINDELETEDSTATE,                                                                         
     FMAXDELETEDSTATE,                                                                         
     DELETEDDYNAMICFORMSTATE,                                                                  
     FMINDELETEDDYNAMICFORMSTATE,                                                              
     FMAXDELETEDDYNAMICFORMSTATE,                                                              
     BOOKSIGN,                                                                                 
     FMINBOOKSIGN,                                                                             
     FMAXBOOKSIGN,                                                                             
     COUNTOPENQUERIES,                                                                         
     COUNTANSWEREDQUERIES,                                                                     
     COUNTCANDIDATEQUERIES,                                                                    
     COUNTCLOSEDQUERIES,                                                                       
     INFORMPARTIALURL_CRFVIEW,                                                                 
     REVIEWSTATE1,                                                                             
     REVIEWSTATE2,                                                                             
     REVIEWSTATE3,                                                                             
     REVIEWSTATE4,                                                                             
     REVIEWSTATE5,                                                                             
     REVIEWSTATE1DATECHANGED,                                                                  
     REVIEWSTATE2DATECHANGED,                                                                  
     REVIEWSTATE3DATECHANGED,                                                                  
     REVIEWSTATE4DATECHANGED,                                                                  
     REVIEWSTATE5DATECHANGED,                                                                  
     DATEDATACHANGED,                                                                          
     ITEMSMARKEDINCOMPLETE
FROM RT_ACTIVATED_FORMS
;

CREATE OR REPLACE VIEW IRV_S_V_SV
AS
SELECT 
       SV.SUBJECTID,SV.SITEID,SV.STUDYVERSIONID, SV.VISITID,
       COALESCE(SVV.VISITREV, SV.VISITREV) AS VISITREV,
       SUBJECTENROLLDATE, SUBJECTSTATE, SUBJECTENROLLED, SUBJECTRANDOMIZED, SUBJECTCOMPLETED,
       NVL2(SVV.VISITID,1,0) AS VISITINCURSV,
       VISITORDER,STARTHOURSFROMPREVIOUS,
       VISITTYPE, VTSUBJECTVISIT, VTCOMMONCRF,
       VISITPROPERTIES, VISITSCHEDULED, VISITSREPEATING, VISITDYNAMIC
FROM (SELECT 
       S.SUBJECTID,S.SUBJECTENROLLDATE,
       S.SUBJECTSTATE,S.SUBJECTENROLLED,S.SUBJECTRANDOMIZED,S.SUBJECTCOMPLETED,
       S.SITEID,SVE.VOLUMEEDITIONID AS STUDYVERSIONID,V.VISITID,V.VISITREV 
      FROM RT_SUBJECT S,
           IRV_VISIT_REVS V,
           PF_SITEVOLUMEEDITION_CUR SVE
      WHERE V.CURRENTREV = 1 AND SVE.SITEID=S.SITEID) SV,
      IRV_STUDYVERSION_VISITS SVV
WHERE SV.STUDYVERSIONID = SVV.STUDYVERSIONID 
AND SV.VISITID = SVV.VISITID 
AND (SVV.VISITDYNAMIC = 0 OR
     --only add those dynamic visits have been started
     (SVV.VISITDYNAMIC = 1 AND (SV.SUBJECTID,SV.VISITID) IN (SELECT DISTINCT SUBJECTID, VISITID FROM RT_SUBJECTVISIT)));
;
 
CREATE OR REPLACE VIEW IRV_SV_SVF
AS
SELECT 
       SUBJECTID,SITEID,-- SV.STUDYID,
       SV.STUDYVERSIONID,
       SV.VISITID, SV.VISITREV,
       SVF.FORMID, SVF.FORMREV
FROM IRV_S_V_SV SV,
     IRV_STUDYVERSION_FORMS SVF
WHERE SV.STUDYVERSIONID = SVF.STUDYVERSIONID
AND SV.VISITID = SVF.VISITID
AND SUBJECTSTATE >= 4 AND FORMTYPE = 1 AND DYNAMICFORM = 0 AND (VTSUBJECTVISIT = 1 OR VTCOMMONCRF = 1);

CREATE OR REPLACE VIEW IRV_AF_SVF
AS
SELECT 
       AF.SUBJECTID,AF.SITEID,RIR.STUDYID,AF.STUDYVERSIONID,
       AF.VISITID, AF.VISITREV, AF.VISITINDEX,
       AF.SUBJECTVISITID, --AF.SUBJECTVISITREV,
       SVEC.SUBJECTCHAPTERREVISIONNUMBER AS SUBJECTVISITREV, SVEC.STARTDATETIME,
       AF.FORMID, AF.FORMREV,AF.FORMINDEX
       --,NVL2(SVF.ROWID,1,0) AS FORMEXPINCURSV
FROM RV_SV_AF AF,
     PF_SUBJECTVECHAPTER_CUR SVEC, 
     IRV_SV_SVF SVF,
     RT_INFORMREP RIR
WHERE AF.SUBJECTID = SVF.SUBJECTID (+)
AND AF.VISITID = SVF.VISITID (+)
AND AF.FORMID = SVF.FORMID (+)
AND SVEC.SUBJECTCHAPTERID = AF.SUBJECTVISITID;

CREATE OR REPLACE VIEW IRV_SV_ACTUAL_FORMS
AS
SELECT SVF.SUBJECTID, SVF.SITEID,IR.STUDYID AS STUDYID,
       SVF.STUDYVERSIONID,
       SVF.VISITID,SVF.VISITREV, 
       COALESCE(VISITINDEX,0) AS VISITINDEX,  
       COALESCE(SUBJECTVISITID,0) AS SUBJECTVISITID,  
       --COALESCE(SUBJECTVISITREV,0) AS SUBJECTVISITREV,
       COALESCE(AF.FORMID,SVF.FORMID) AS FORMID, 
       COALESCE(AF.FORMREV,SVF.FORMREV) AS FORMREV,
       COALESCE(FORMINDEX,0) AS FORMINDEX
FROM IRV_SV_SVF SVF,
     RV_SV_AF AF, 
     RT_INFORMREP IR
WHERE SVF.SUBJECTID = AF.SUBJECTID (+)
AND SVF.VISITID = AF.VISITID (+)
AND SVF.FORMID = AF.FORMID (+)
AND SUBJECTVISITID IS NULL
UNION ALL
SELECT SUBJECTID,SITEID,IR.STUDYID AS STUDYID,
       STUDYVERSIONID,
       VISITID, VISITREV,
       VISITINDEX,
       SUBJECTVISITID,
       --SUBJECTVISITREV,
       FORMID, 
       FORMREV,
       FORMINDEX
FROM IRV_AF_SVF, RT_INFORMREP IR;


CREATE OR REPLACE VIEW IRV_AF_ROLLUP_VISITS
AS
SELECT 1 AS SUBJECTVISIT,
       SUBJECTVISITID,
       SUM(STARTEDSTATE) AS FORMSSTARTED,
       SUM(SDVREADYSTATE) AS FORMSSDVREADY,
       SUM(SDVPARTIALSTATE) AS FORMSSDVPARTIAL,
       SUM(SDVCOMPLETESTATE) AS FORMSSDVCOMPLETE,
       SUM(LOCKEDSTATE) AS FORMSLOCKED,
       SUM(FROZENSTATE) AS FORMSFROZEN,
       SUM(SIGNEDSTATE) AS FORMSSIGNED,
       SUM(COMPLETESTATE) AS FORMSCOMPLETE,
       SUM(HASQUERIESSTATE) AS FORMSHAVEQUERIES,
       SUM(HASCOMMENTSSTATE) AS FORMSHAVECOMMENTS,
       SUM(HASDATASTATE) AS FORMSHAVEDATA,
       SUM(MISSINGITEMSSTATE) AS FORMSMISSINGITEMS,
       SUM(NOTDONESTATE) AS FORMSNOTDONE,
       SUM(DELETEDSTATE) AS FORMSDELETED,
       SUM(DELETEDDYNAMICFORMSTATE) AS FORMSDELETEDDYNAMICFORM,
       SUM(BOOKSIGN) AS FORMSBOOKSIGN
FROM RT_ACTIVATED_FORMS AF
GROUP BY SUBJECTVISITID;

CREATE OR REPLACE VIEW IRV_AF_ROLLUP_SUBJECTS
AS
SELECT 1 AS SUBJECT,
       SUBJECTID,
       SUM(STARTEDSTATE) AS FORMSSTARTED,
       SUM(SDVREADYSTATE) AS FORMSSDVREADY,
       SUM(SDVPARTIALSTATE) AS FORMSSDVPARTIAL,
       SUM(SDVCOMPLETESTATE) AS FORMSSDVCOMPLETE,
       SUM(LOCKEDSTATE) AS FORMSLOCKED,
       SUM(FROZENSTATE) AS FORMSFROZEN,
       SUM(SIGNEDSTATE) AS FORMSSIGNED,
       SUM(COMPLETESTATE) AS FORMSCOMPLETE,
       SUM(HASQUERIESSTATE) AS FORMSHAVEQUERIES,
       SUM(HASCOMMENTSSTATE) AS FORMSHAVECOMMENTS,
       SUM(HASDATASTATE) AS FORMSHAVEDATA,
       SUM(MISSINGITEMSSTATE) AS FORMSMISSINGITEMS,
       SUM(NOTDONESTATE) AS FORMSNOTDONE,
       SUM(DELETEDSTATE) AS FORMSDELETED,
       SUM(DELETEDDYNAMICFORMSTATE) AS FORMSDELETEDDYNAMICFORM,
       SUM(BOOKSIGN) AS FORMSBOOKSIGN
FROM RT_ACTIVATED_FORMS AF
GROUP BY SUBJECTID;

CREATE OR REPLACE VIEW IRV_AF_ROLLUP_SITES
AS
SELECT 1 AS SITE,
       SITEID,
       SUM(STARTEDSTATE) AS FORMSSTARTED,
       SUM(SDVREADYSTATE) AS FORMSSDVREADY,
       SUM(SDVPARTIALSTATE) AS FORMSSDVPARTIAL,
       SUM(SDVCOMPLETESTATE) AS FORMSSDVCOMPLETE,
       SUM(LOCKEDSTATE) AS FORMSLOCKED,
       SUM(FROZENSTATE) AS FORMSFROZEN,
       SUM(SIGNEDSTATE) AS FORMSSIGNED,
       SUM(COMPLETESTATE) AS FORMSCOMPLETE,
       SUM(HASQUERIESSTATE) AS FORMSHAVEQUERIES,
       SUM(HASCOMMENTSSTATE) AS FORMSHAVECOMMENTS,
       SUM(HASDATASTATE) AS FORMSHAVEDATA,
       SUM(MISSINGITEMSSTATE) AS FORMSMISSINGITEMS,
       SUM(NOTDONESTATE) AS FORMSNOTDONE,
       SUM(DELETEDSTATE) AS FORMSDELETED,
       SUM(DELETEDDYNAMICFORMSTATE) AS FORMSDELETEDDYNAMICFORM,
       SUM(BOOKSIGN) AS FORMSBOOKSIGN
FROM RT_ACTIVATED_FORMS AF
GROUP BY SITEID;

CREATE OR REPLACE VIEW IRV_AF_ROLLUP_STUDYVERSIONS
AS
SELECT 1 AS STUDYVERSION,
       SVE.VOLUMEEDITIONID AS STUDYVERSIONID,
       SUM(STARTEDSTATE) AS FORMSSTARTED,
       SUM(SDVREADYSTATE) AS FORMSSDVREADY,
       SUM(SDVPARTIALSTATE) AS FORMSSDVPARTIAL,
       SUM(SDVCOMPLETESTATE) AS FORMSSDVCOMPLETE,
       SUM(LOCKEDSTATE) AS FORMSLOCKED,
       SUM(FROZENSTATE) AS FORMSFROZEN,
       SUM(SIGNEDSTATE) AS FORMSSIGNED,
       SUM(COMPLETESTATE) AS FORMSCOMPLETE,
       SUM(HASQUERIESSTATE) AS FORMSHAVEQUERIES,
       SUM(HASCOMMENTSSTATE) AS FORMSHAVECOMMENTS,
       SUM(HASDATASTATE) AS FORMSHAVEDATA,
       SUM(MISSINGITEMSSTATE) AS FORMSMISSINGITEMS,
       SUM(NOTDONESTATE) AS FORMSNOTDONE,
       SUM(DELETEDSTATE) AS FORMSDELETED,
       SUM(DELETEDDYNAMICFORMSTATE) AS FORMSDELETEDDYNAMICFORM,
       SUM(BOOKSIGN) AS FORMSBOOKSIGN
FROM RT_ACTIVATED_FORMS AF, PF_SITEVOLUMEEDITION_CUR SVE
WHERE AF.SITEID = SVE.SITEID
GROUP BY SVE.VOLUMEEDITIONID;

CREATE OR REPLACE VIEW IRV_AF_ROLLUP_STUDY
AS
SELECT 1 AS STUDY,
       IR.STUDYID AS STUDYID,
       SUM(STARTEDSTATE) AS FORMSSTARTED,
       SUM(SDVREADYSTATE) AS FORMSSDVREADY,
       SUM(SDVPARTIALSTATE) AS FORMSSDVPARTIAL,
       SUM(SDVCOMPLETESTATE) AS FORMSSDVCOMPLETE,
       SUM(LOCKEDSTATE) AS FORMSLOCKED,
       SUM(FROZENSTATE) AS FORMSFROZEN,
       SUM(SIGNEDSTATE) AS FORMSSIGNED,
       SUM(COMPLETESTATE) AS FORMSCOMPLETE,
       SUM(HASQUERIESSTATE) AS FORMSHAVEQUERIES,
       SUM(HASCOMMENTSSTATE) AS FORMSHAVECOMMENTS,
       SUM(HASDATASTATE) AS FORMSHAVEDATA,
       SUM(MISSINGITEMSSTATE) AS FORMSMISSINGITEMS,
       SUM(NOTDONESTATE) AS FORMSNOTDONE,
       SUM(DELETEDSTATE) AS FORMSDELETED,
       SUM(DELETEDDYNAMICFORMSTATE) AS FORMSDELETEDDYNAMICFORM,
       SUM(BOOKSIGN) AS FORMSBOOKSIGN
FROM RT_ACTIVATED_FORMS AF, RT_INFORMREP IR
GROUP BY IR.STUDYID;

--COMMENT

CREATE OR REPLACE VIEW IRV_COMMENT_REVS
AS
SELECT 
       CR.COMMENTID,CR.COMMENTREVISIONNUMBER AS COMMENTREV,PFTIMESTAMP AS COMMENTTIME, RH.USERID AS COMMENTUSERID,HISTORICALORDER AS COMMENTHIST,IC.CONTEXTID, 
       SUBJECTKEYID AS SUBJECTID, SITEID, IC.CHAPTERID AS VISITID, CHAPTERINDEX AS VISITINDEX, IC.PAGEID AS FORMID, PAGEREVISIONNUMBER AS FORMREV, PAGEINDEX AS FORMINDEX, IC.SECTIONID, 
       NVL2(ITEMSETID,ITEMSETID,0) AS ITEMSETID,NVL2(ITEMSETID,IC.SETITEMORDER,0) AS ITEMSETINDEX, IC.ITEMID,
       COMMENTTYPE, DECODE(COMMENTTYPE,1,1,0) AS CITEMCOMMENT, DECODE(COMMENTTYPE,0,1,0) AS CFORMCOMMENT,
       (CASE WHEN length(commenttext) > 1000 
               Then CAST(SUBSTR('**TRUNCATED** '|| COMMENTTEXT,1,972) AS VARCHAR(4000))
               ELSE CAST(SUBSTR(COMMENTTEXT,1,1000) AS VARCHAR(4000)) 
        END) AS COMMENTTEXT
FROM PF_COMMENT CR,
     PF_REVISIONHISTORY RH,
     PF_ITEMCONTEXT IC,
     RT_SUBJECT S
WHERE CR.COMMENTID = RH.DBUID
AND CR.COMMENTREVISIONNUMBER = RH.REVISIONNUMBER
AND CR.CONTEXTID = IC.CONTEXTID
AND IC.SUBJECTKEYID = S.SUBJECTID
;

CREATE OR REPLACE VIEW IRV_CUR_COMMENT
AS
SELECT 1 AS COMMENTCOUNT,
       C.COMMENTID, COMMENTTIME, COMMENTUSERID, COMMENTHIST, 
       CONTEXTID, SUBJECTVISITID,
       SUBJECTID, C.SITEID, SVE.VOLUMEEDITIONID AS STUDYVERSIONID,C.VISITID, VISITREV,VISITINDEX, 
       DENSE_RANK() OVER (PARTITION BY SUBJECTID, C.VISITID ORDER BY VISITINDEX) VISITIDX,
       C.FORMID, C.FORMREV, FORMINDEX,
       DENSE_RANK() OVER (PARTITION BY SUBJECTID, C.VISITID, VISITINDEX, C.FORMID ORDER BY FORMINDEX) FORMIDX,
       C.SECTIONID, SECTIONREV,
       C.ITEMSETID, ITEMSETREV,ITEMSETINDEX,
       DECODE(ITEMSETINDEX,0,NULL,DENSE_RANK() OVER (PARTITION BY SUBJECTID, C.VISITID, VISITINDEX, C.FORMID, FORMINDEX, C.SECTIONID, C.ITEMSETID ORDER BY ITEMSETINDEX )) ITEMSETIDX, 
       C.ITEMID, ITEMREV,
       CREVS, MINCOMMENTREV, MAXCOMMENTREV, COMMENTTYPE, CITEMCOMMENT, CFORMCOMMENT, COMMENTTEXT
FROM RT_COMMENT C,
     RT_STUDYVERSION_VISITS SVV,
     IRV_MDFIS_I ISI,
     PF_SITEVOLUMEEDITION_CUR SVE
WHERE C.SITEID = SVE.SITEID
AND C.VISITID = SVV.VISITID (+)
AND C.FORMID = ISI.FORMID (+)
AND C.FORMREV = ISI.FORMREV (+)
AND C.SECTIONID = ISI.SECTIONID (+)
AND C.ITEMSETID = ISI.ITEMSETID (+)
AND C.ITEMID = ISI.ITEMID (+);


--QUERY

CREATE OR REPLACE VIEW IRV_QUERY_REVS AS
with RV_CUR_RULEITEM_OJ as
(SELECT RULEITEMID, RULEID, COUNT(*) ROWCNT
FROM RV_CUR_RULEITEM
GROUP BY RULEITEMID, RULEID)
SELECT
       QR.QUERYID,QUERYREVISIONNUMBER AS QUERYREV,QREVS, MINQUERYREV, MAXQUERYREV,
       DECODE(QUERYREVISIONNUMBER,MINQUERYREV,1,0) AS FIRSTQUERYREV,
       DECODE(QUERYREVISIONNUMBER,MAXQUERYREV,1,0) AS CURRENTQUERYREV,
       PFTIMESTAMP AS QUERYTIME, QR.USERID AS QUERYUSERID,HISTORICALORDER AS QUERYHIST,
       QR.CONTEXTID, 
--SV.SUBJECTVISITID,
       SVC.SUBJECTCHAPTERID AS SUBJECTVISITID,
       QR.SUBJECTKEYID AS SUBJECTID,
RIR.STUDYID,
S.SITEID,
SVE.VOLUMEEDITIONID AS STUDYVERSIONID,
       QR.CHAPTERID AS VISITID, QR.CHAPTERINDEX AS VISITINDEX,
       QR.PAGEID AS FORMID, QR.PAGEREVISIONNUMBER AS FORMREV, QR.PAGEINDEX AS FORMINDEX,
       QR.SECTIONID,
       NVL2(QR.ITEMSETID,QR.ITEMSETID,0) AS ITEMSETID,
       NVL2(QR.ITEMSETID,QR.SETITEMORDER,0) AS ITEMSETINDEX,
       QR.ITEMID,
       QUERYTYPE,
       DECODE(QUERYTYPE,0,1,0) AS QTYPEAUTO,
       DECODE(QUERYTYPE,1,1,0) AS QTYPEMANUAL,
       DECODE(QUERYTYPE,2,1,0) AS QTYPECONFLICT,
       QUERYSTATE,
       REISSUED AS QREISSUED,
       DECODE(QUERYSTATE,0,1,0) AS QCANDIDATE,
       DECODE(QUERYSTATE,1,1,0) AS QOPENED,
       DECODE(QUERYSTATE,2,1,0) AS QANSWERED,
       DECODE(QUERYSTATE,3,1,0) AS QCLOSED,
       DECODE(QUERYSTATE,4,1,0) AS QDELETED,
       QUERYGROUP, QUERYDATA, Q.MAXRULEITEMID AS RULEITEMID,RULEID, CONFLICTSTATE 
FROM RV_DIM_QUERIES Q,
     RV_QUERY_RH QR,
     RT_SUBJECT S,
     PF_SUBJECTVECHAPTER_CUR SVC,
     --RV_DIM_SUBJECTVISIT SV,
     RV_CUR_RULEITEM_OJ RI,
     PF_SITEVOLUMEEDITION_CUR SVE,
     RT_INFORMREP RIR
WHERE QR.QUERYID = Q.QUERYID
AND QR.SUBJECTKEYID = S.SUBJECTID
AND QR.SUBJECTKEYID = SVC.SUBJECTKEYID
AND QR.CHAPTERID = SVC.CHAPTERID
AND QR.CHAPTERINDEX = SVC.CHAPTERINDEX
AND QR.SUBJECTKEYTYPE = SVC.SUBJECTKEYTYPE
AND Q.MAXRULEITEMID = RI.RULEITEMID (+)
AND S.SITEID=SVE.SITEID;

CREATE OR REPLACE VIEW IRV_QUERY_STATE_CHANGES
AS
SELECT QUERYID,QUERYREV,QUERYSTATE,QUERYSTATETIME,QUERYUSERID,SUBSTR(QUERYTEXT,1,100) AS QUERYTEXT,
       ROW_NUMBER() OVER (PARTITION BY QUERYID ORDER BY QUERYREV) AS QSTATEORDER,
       PREVQUERYSTATE,PREVQUERYSTATETIME,PREVQUERYUSERID,SUBSTR(PREVQUERYTEXT,1,100) AS PREVQUERYTEXT,
       LEAD(QUERYSTATE) OVER (PARTITION BY QUERYID ORDER BY QUERYREV) AS NEXTQUERYSTATE,
       LEAD(QUERYSTATETIME) OVER (PARTITION BY QUERYID ORDER BY QUERYREV) AS NEXTQUERYSTATETIME,
       LEAD(QUERYUSERID) OVER (PARTITION BY QUERYID ORDER BY QUERYREV) AS NEXTQUERYUSERID,
       SUBSTR(LEAD(QUERYTEXT) OVER (PARTITION BY QUERYID ORDER BY QUERYREV),1,100) AS NEXTQUERYTEXT
FROM (SELECT QUERYID,QUERYREV,QUERYSTATE,QUERYTIME AS QUERYSTATETIME,QUERYUSERID,QUERYDATA AS QUERYTEXT,
             LAG(QUERYSTATE) OVER (PARTITION BY QUERYID ORDER BY QUERYREV) AS PREVQUERYSTATE,
             LAG(QUERYTIME) OVER (PARTITION BY QUERYID ORDER BY QUERYREV) AS PREVQUERYSTATETIME,
             LAG(QUERYUSERID) OVER (PARTITION BY QUERYID ORDER BY QUERYREV) AS PREVQUERYUSERID,
             LAG(QUERYDATA) OVER (PARTITION BY QUERYID ORDER BY QUERYREV) AS PREVQUERYTEXT
	  FROM RV_QUERY_REVS)
WHERE PREVQUERYSTATE IS NULL OR QUERYSTATE != PREVQUERYSTATE;

CREATE OR REPLACE VIEW IRV_QUERY_RULEITEM
AS
SELECT QUERYID,
       RI.RULEITEMID, RIREVS, MINRIREV, MAXRIREV, RULEITEMREFNAME, APPLYEVENT, ACTIVE, RI.RULEID, CHAPTERID, PAGEID, RI.SECTIONID, RI.ITEMSETID, RI.ITEMID, RULESETID, ITEMSETEVENTID, ITEMSETHELPID
FROM RT_QUERY Q,
     RV_CUR_RULEITEM RI
WHERE Q.RULEITEMID = RI.RULEITEMID;

CREATE OR REPLACE VIEW IRV_QUERY_RULE
AS
SELECT QUERYID,
       R.RULEID, RULEREV, RREVS, MINRREV, MAXRREV, RULEREFNAME, RULEDESCRIPTION, RULEENABLED, EVENTTYPEID, ETINITIALREVISIONNUMBER, SCRIPTTYPE, HELPTEXTID, DESIGNNOTE, CTMSGTEXT, CTRULEACTION, CTRULEOPTIONS
FROM RT_QUERY Q,
     RV_CUR_RULE R
WHERE Q.RULEID = R.RULEID;


CREATE OR REPLACE FORCE VIEW IRV_CUR_QUERY_HELP1 AS
   SELECT 1 AS QUERYCOUNT,
    Q.QUERYID,
    Q.QUERYTIME,
    Q.QUERYUSERID,
    Q.QUERYHIST,
    Q.CONTEXTID,
    Q.SUBJECTVISITID,
    Q.SUBJECTID,
    RIR.STUDYID,
    Q.SITEID,
    SVE.VOLUMEEDITIONID AS STUDYVERSIONID,
    Q.VISITID,
    SVV.VISITREV,
    Q.VISITINDEX,
    (SELECT MAX(SV.STUDYVERSIONID) FROM RT_STUDYVERSION_VISITS SV WHERE Q.VISITID=SV.VISITID) AS VISITSTUDYVERSIONID, 
    Q.FORMID,
    Q.FORMREV,
    Q.FORMINDEX,
    Q.SECTIONID,
    ISI.SECTIONREV,
    Q.ITEMSETID,
    ISI.ITEMSETREV,
    Q.ITEMSETINDEX,
    Q.ITEMID,
    ISI.ITEMREV,
    Q.QREVS,
    Q.MINQUERYREV, 
    Q.MAXQUERYREV,
    Q.QUERYTYPE,
    Q.QTYPEAUTO,
    Q.QTYPEMANUAL,
    Q.QTYPECONFLICT,
    Q.QUERYSTATE,
    Q.QREISSUED,
    Q.QCANDIDATE,
    Q.QOPENED,
    Q.QANSWERED,
    Q.QCLOSED,
    Q.QDELETED,
    Q.QUERYGROUP,
    Q.QUERYDATA,
    Q.RULEITEMID,
    Q.RULEID,
    Q.CONFLICTSTATE,
    Q.INFORMPARTIALURL_QUERY,
    NVL2(Q.QMAXANSWERED,TRUNC(Q.QMAXANSWERED-Q.QMINOPENED,0),NULL)   AS QDAYSOPENTOANSWER,
    NVL2(Q.QMAXCLOSED,TRUNC(Q.QMAXCLOSED    -Q.QMAXANSWERED,0),NULL) AS QDAYSANSWERTOCLOSE,
    NVL2(Q.QMAXCLOSED,TRUNC(Q.QMAXCLOSED    -Q.QMINOPENED,0),NULL)   AS QDAYSOPENTOCLOSE,
    Q.QCOUNTREISSUED,
    Q.QMINREISSUED,
    Q.QMAXREISSUED,
    Q.QCOUNTCANDIDATE,
    Q.QMINCANDIDATE,
    Q.QMAXCANDIDATE,
    Q.QCOUNTOPENED,
    Q.QMINOPENED,
    Q.QMAXOPENED,
    Q.QCOUNTANSWERED,
    Q.QMINANSWERED,
    Q.QMAXANSWERED,
    Q.QCOUNTCLOSED,
    Q.QMINCLOSED,
    Q.QMAXCLOSED,
    Q.QCOUNTDELETED,
    Q.QMINDELETED,
    Q.QMAXDELETED
  FROM
    RT_QUERY Q
     LEFT JOIN IRV_MDFIS_I ISI
       ON (Q.FORMID = ISI.FORMID  AND Q.FORMREV = ISI.FORMREV AND Q.SECTIONID = ISI.SECTIONID
             AND Q.ITEMSETID = ISI.ITEMSETID  AND Q.ITEMID = ISI.ITEMID)
     JOIN PF_SUBJECTVECHAPTER_CUR SVC 
       ON (Q.SUBJECTID = SVC.SUBJECTKEYID AND Q.VISITID = SVC.CHAPTERID
                AND Q.VISITINDEX = SVC.CHAPTERINDEX)
     JOIN PF_SITEVOLUMEEDITION_CUR SVE 
       ON (Q.SITEID = SVE.SITEID)
     LEFT JOIN RT_STUDYVERSION_VISITS SVV
       ON (Q.VISITID = SVV.VISITID AND SVE.VOLUMEEDITIONID = SVV.STUDYVERSIONID)
    ,RT_INFORMREP RIR; 


CREATE OR REPLACE FORCE VIEW IRV_CUR_QUERY_HELP2 AS
  WITH QHISTORY AS (SELECT QR.QUERYID, QR.QUERYREVISIONNUMBER, QR.QUERYDATA, HIST.USERID AS QUERYUSERID,
       HIST.PFTIMESTAMP AS QUERYTIME,
       LEAD(QR.QUERYSTATE) OVER (PARTITION BY QR.QUERYID ORDER BY QR.QUERYREVISIONNUMBER) AS NEXTQUERYSTATE
FROM PF_QUERY QR
     JOIN PF_REVISIONHISTORY HIST
      ON (QR.QUERYID = HIST.DBUID AND QR.QUERYREVISIONNUMBER = HIST.REVISIONNUMBER))
  SELECT Q.QUERYID,
    MAX(DECODE(QHIST.QUERYREVISIONNUMBER, Q.MINQUERYREV, QHIST.QUERYUSERID, NULL) ) AS QORIGUSER,
    MAX(DECODE(QHIST.NEXTQUERYSTATE, NULL, QHIST.QUERYTIME, NULL)) AS QSTATUSTIME,
    MAX(DECODE(QHIST.QUERYREVISIONNUMBER, Q.QMINREISSUEDREV, QHIST.QUERYDATA, NULL)) AS FIRSTREISSUEDTEXT,
    MAX(DECODE(QHIST.QUERYREVISIONNUMBER, Q.QMAXREISSUEDREV, QHIST.QUERYDATA, NULL)) AS LASTREISSUEDTEXT,
    MAX(DECODE(QHIST.QUERYREVISIONNUMBER, Q.QMINCANDIDATEREV, QHIST.QUERYDATA, NULL)) AS FIRSTCANDIDATETEXT,
    MAX(DECODE(QHIST.QUERYREVISIONNUMBER, Q.QMAXCANDIDATEREV, QHIST.QUERYDATA, NULL)) AS LASTCANDIDATETEXT,
    MAX(DECODE(QHIST.QUERYREVISIONNUMBER, Q.QMINOPENEDREV, QHIST.QUERYDATA, NULL)) AS FIRSTOPENEDTEXT,
    MAX(DECODE(QHIST.QUERYREVISIONNUMBER, Q.QMAXOPENEDREV, QHIST.QUERYDATA, NULL)) AS LASTOPENEDTEXT,
    MAX(DECODE(QHIST.QUERYREVISIONNUMBER, Q.QMINANSWEREDREV, QHIST.QUERYDATA, NULL)) AS FIRSTANSWEREDTEXT,
    MAX(DECODE(QHIST.QUERYREVISIONNUMBER, Q.QMAXANSWEREDREV, QHIST.QUERYDATA, NULL)) AS LASTANSWEREDTEXT,
    MAX(DECODE(QHIST.QUERYREVISIONNUMBER, Q.QMINCLOSEDREV, QHIST.QUERYDATA, NULL)) AS FIRSTCLOSEDTEXT,
    MAX(DECODE(QHIST.QUERYREVISIONNUMBER, Q.QMAXCLOSEDREV, QHIST.QUERYDATA, NULL)) AS LASTCLOSEDTEXT,
    MAX(DECODE(QHIST.QUERYREVISIONNUMBER, Q.QMINDELETEDREV, QHIST.QUERYDATA, NULL)) AS FIRSTDELETEDTEXT,
    MAX(DECODE(QHIST.QUERYREVISIONNUMBER, Q.QMAXDELETEDREV, QHIST.QUERYDATA, NULL)) AS LASTDELETEDTEXT
  FROM
    RT_QUERY Q
     JOIN QHISTORY QHIST 
       ON (Q.QUERYID = QHIST.QUERYID)
GROUP BY Q.QUERYID;


CREATE OR REPLACE FORCE VIEW IRV_CUR_QUERY
           AS
SELECT REV1.*, REV2.QORIGUSER, REV2.QSTATUSTIME,     
         TRUNC(SYSDATE - REV2.QSTATUSTIME ,0) AS QDAYSINSTATE,
      REV2.FIRSTREISSUEDTEXT, REV2.LASTREISSUEDTEXT, REV2.FIRSTCANDIDATETEXT, REV2.LASTCANDIDATETEXT,
      REV2.FIRSTOPENEDTEXT, REV2.LASTOPENEDTEXT, REV2.FIRSTANSWEREDTEXT, REV2.LASTANSWEREDTEXT, 
      REV2.FIRSTCLOSEDTEXT, REV2.LASTCLOSEDTEXT, REV2.FIRSTDELETEDTEXT, REV2.LASTDELETEDTEXT FROM IRV_CUR_QUERY_HELP1 REV1, IRV_CUR_QUERY_HELP2 REV2
WHERE REV1.QUERYID=REV2.QUERYID;


CREATE OR REPLACE VIEW IRV_FORM_QUERY_ROLLUP
AS
SELECT SV.SUBJECTVISITID, FORMID, FORMREV, FORMINDEX,
       COUNT(QUERYID) AS QUERIES,
       SUM(QTYPEAUTO) AS QTYPEAUTO, 
       SUM(QTYPEMANUAL) AS QTYPEMANUAL, 
       SUM(QTYPECONFLICT) AS QTYPECONFLICT, 
       SUM(QREISSUED) AS QREISSUED, 
       SUM(QCANDIDATE) AS QCANDIDATE, 
       SUM(QOPENED) AS QOPENED, 
       SUM(QANSWERED) AS QANSWERED, 
       SUM(QCLOSED) AS QCLOSED, 
       SUM(QDELETED) AS QDELETED
FROM RT_SUBJECTVISIT SV,
     RT_QUERY Q
WHERE SV.SUBJECTID = Q.SUBJECTID
AND SV.VISITID = Q.VISITID
AND SV.VISITINDEX = Q.VISITINDEX
GROUP BY SV.SUBJECTVISITID, FORMID, FORMREV, FORMINDEX;

--SUBJECTFORMITEMS
/*
CREATE OR REPLACE VIEW IRV_IC_ROLLUP_SECTIONITEMS
AS
SELECT 1 AS SECTIONITEM,
       SUBJECTID, SITEID, 
       RIR.STUDYID, STUDYVERSIONID, 
       VISITID, VISITREV, VISITINDEX, SI.SUBJECTVISITID, --SUBJECTVISITREV,
       SVEC.SUBJECTCHAPTERREVISIONNUMBER AS SUBJECTVISITREV,
       FORMID, FORMREV, FORMINDEX, 
       SECTIONORDER, SECTIONID, SECTIONREV, 
       SECTIONITEMORDER, ITEMID, ITEMREV, 
       CONTEXTID, IDREVS, MINAUDITORDER, MAXAUDITORDER, IHREVS, MINCONTEXTREV, MAXCONTEXTREV, 
       DATATRANSACTIONID,DATAUSERID, DATATIME, DATAREASON, SDVTIME, STATETRANSACTIONID,STATEUSERID, STATETIME, STATEREASON, 
--       ITEMDELETED, 
       ITEMSDVED, ITEMHASDATA, 
       CONTROLS, CONTROLSWITHDATA, 
       QUERIES, QTYPEAUTO, QTYPEMANUAL, QTYPECONFLICT, QREISSUED, QCANDIDATE, QOPENED, QANSWERED, QCLOSED, QDELETED, COMMENTS
FROM 
RV_IC_SECTIONITEMS SI, 
PF_SUBJECTVECHAPTER_CUR SVEC,
RT_INFORMREP RIR
WHERE SI.SUBJECTVISITID=SVEC.SUBJECTCHAPTERID;

CREATE OR REPLACE VIEW IRV_IC_ROLLUP_ITEMSETITEMS
AS
SELECT 1 AS ITEMSETITEM,
       SUBJECTID, SITEID, 
       RIR.STUDYID, STUDYVERSIONID, 
       VISITID, VISITREV, VISITINDEX, ISI.SUBJECTVISITID, --SUBJECTVISITREV,
       SVEC.SUBJECTCHAPTERREVISIONNUMBER AS SUBJECTVISITREV,
       FORMID, FORMREV, FORMINDEX, SECTIONORDER, SECTIONID, SECTIONREV, 
       SECTIONITEMORDER, ITEMSETID, ITEMSETREV, ITEMSETINDEX, 
       ITEMSETITEMORDER,ITEMID, ITEMREV, CONTEXTID, IDREVS, MINAUDITORDER, MAXAUDITORDER, IHREVS, MINCONTEXTREV, MAXCONTEXTREV, 
       DATATRANSACTIONID, DATAUSERID, DATATIME, DATAREASON, 
       SDVTIME, 
       STATETRANSACTIONID,STATEUSERID, STATETIME, STATEREASON, 
--       ITEMDELETED, 
       ITEMSDVED, ITEMHASDATA, CONTROLS, CONTROLSWITHDATA, 
       QUERIES, QTYPEAUTO, QTYPEMANUAL, QTYPECONFLICT, QREISSUED, QCANDIDATE, QOPENED, QANSWERED, QCLOSED, QDELETED, COMMENTS
FROM RV_IC_ITEMSETITEMS ISI, 
PF_SUBJECTVECHAPTER_CUR SVEC,
RT_INFORMREP RIR
WHERE ISI.SUBJECTVISITID=SVEC.SUBJECTCHAPTERID;

CREATE OR REPLACE VIEW IRV_IC_ROLLUP_SECTIONITEMSETS
AS
SELECT 1 AS ITEMSET,
       SUBJECTID, SITEID, STUDYID, STUDYVERSIONID, VISITID, VISITREV, VISITINDEX, SUBJECTVISITID, SUBJECTVISITREV, 
       FORMID, FORMREV, FORMINDEX, SECTIONORDER, SECTIONID, SECTIONREV, SECTIONITEMORDER, ITEMSETID, ITEMSETREV, ITEMSETINDEX,
       SUM(ITEMSETITEM) AS ITEMSETITEMS,
       MIN(SDVTIME) AS FIRSTSDVTIME, 
       MAX(SDVTIME) AS LASTSDVTIME, 
       MIN(DATATIME) AS FIRSTDATATIME, 
       MAX(DATATIME) AS LASTDATATIME,
       MIN(DATATRANSACTIONID) AS FIRSTDATATRANSACTIONID, 
       MAX(DATATRANSACTIONID) AS LASTDATATRANSACTIONID,
       MIN(STATETIME) AS FIRSTSTATETIME, 
       MAX(STATETIME) AS LASTSTATETIME,
       MIN(STATETRANSACTIONID) AS FIRSTSTATETRANSACTIONID, 
       MAX(STATETRANSACTIONID) AS LASTSTATETRANSACTIONID,
--     SUM(ITEMDELETED) AS ITEMSDELETED, 
       SUM(ITEMSDVED) AS ITEMSSDVED, 
       SUM(ITEMHASDATA) AS ITEMSWITHDATA, 
       SUM(CONTROLS) AS CONTROLS, 
       SUM(CONTROLSWITHDATA) AS CONTROLSWITHDATA, 
       SUM(QUERIES) AS QUERIES, 
       SUM(QTYPEAUTO) AS QTYPEAUTO, 
       SUM(QTYPEMANUAL) AS QTYPEMANUAL, 
       SUM(QTYPECONFLICT) AS QTYPECONFLICT, 
       SUM(QREISSUED) AS QREISSUED, 
       SUM(QCANDIDATE) AS QCANDIDATE, 
       SUM(QOPENED) AS QOPENED, 
       SUM(QANSWERED) AS QANSWERED, 
       SUM(QCLOSED) AS QCLOSED, 
       SUM(QDELETED) AS QDELETED, 
       SUM(COMMENTS) AS COMMENTS
FROM IRV_IC_ROLLUP_ITEMSETITEMS
GROUP BY SUBJECTID, SITEID, STUDYID, STUDYVERSIONID, VISITID, VISITREV, VISITINDEX, SUBJECTVISITID, SUBJECTVISITREV, 
         FORMID, FORMREV, FORMINDEX,SECTIONORDER, SECTIONID, SECTIONREV, SECTIONITEMORDER, ITEMSETID, ITEMSETREV, ITEMSETINDEX;

CREATE OR REPLACE VIEW IRV_IC_ROLLUP_SECTIONS
AS
SELECT 1 AS SECTION,
       COALESCE(SI.SECTIONORDER,SIS.SECTIONORDER) AS SECTIONORDER,
       COALESCE(SI.SECTIONID,SIS.SECTIONID) AS SECTIONID,
       COALESCE(SI.SECTIONREV,SIS.SECTIONREV) AS SECTIONREV,
       COALESCE(SUM(SECTIONITEM),0) AS SECTIONITEMS,
       COALESCE(SUM(ITEMSET),0) AS ITEMSETS,
       COALESCE(SUM(ITEMSETITEMS),0) AS ITEMSETITEMS
FROM IRV_IC_ROLLUP_SECTIONITEMS SI,
     IRV_IC_ROLLUP_SECTIONITEMSETS SIS
WHERE 
--  SI.CSVROWID = SIS.CSVROWID (+)
--AND SI.AFROWID = SIS.AFROWID (+)
SI.SUBJECTVISITID = SIS.SUBJECTVISITID (+)
AND SI.SUBJECTID = SIS.SUBJECTID (+)
AND SI.VISITID = SIS.VISITID (+)
AND SI.VISITINDEX = SIS.VISITINDEX (+)
AND SI.FORMID = SIS.FORMID (+)
AND SI.FORMINDEX = SIS.FORMINDEX (+)
AND SI.SECTIONITEMORDER = SIS.SECTIONITEMORDER (+)
AND SI.SECTIONID = SIS.SECTIONID (+)
AND SI.SECTIONREV = SIS.SECTIONREV (+)
GROUP BY -- SI.AFROWID,SI.CSVROWID,SIS.AFROWID,SIS.CSVROWID,
       SI.SECTIONORDER,SIS.SECTIONORDER,
       SI.SECTIONID,SIS.SECTIONID,
       SI.SECTIONREV,SIS.SECTIONREV;
*/
CREATE OR REPLACE VIEW IRV_IC_FORMITEMS
AS
  SELECT FI.CONTEXTID,
    FI.ITEM,
    FI.SECTIONITEM,
    FI.ITEMSETITEM,
    RIR.STUDYID,
    SVE.VOLUMEEDITIONID AS STUDYVERSIONID,
    FI.SITEID,
    FI.SUBJECTID,
    FI.VISITID,
    RVR.VISITREV,
    FI.VISITINDEX,
    FI.SUBJECTVISITID, --SUBJECTVISITREV,
    SVEC.SUBJECTCHAPTERREVISIONNUMBER AS SUBJECTVISITREV,
    FI.FORMID,
    FI.FORMREV,
    FI.FORMINDEX,
    FI.SECTIONORDER,
    FI.SECTIONID,
    FI.SECTIONREV,
    FI.SECTIONITEMORDER,
    FI.ITEMSETID,
    FI.ITEMSETREV,
    FI.ITEMSETINDEX,
    FI.ITEMSETITEMORDER,
    FI.ITEMID,
    FI.ITEMREV,
    ID.IDREVS,
    FI.MAXAUDITORDER,
    IH.IHREVS,
    FI.MINCONTEXTREV,
    FI.MAXCONTEXTREV,
    FI.DATATRANSACTIONID,
    FI.DATAUSERID,
    FI.DATATIME,
    FI.DATAREASON,
    FI.SDVTIME,
    FI.STATETRANSACTIONID,
    FI.STATEUSERID,
    FI.STATETIME,
    FI.STATEREASON,
    FI.ITEMDELETED,
    FI.ITEMSDVED,
    FI.ITEMHASDATA,
    FI.CONTROLS,
    FI.CONTROLSWITHDATA,
    FI.QUERIES,
    FI.QTYPEAUTO,
    FI.QTYPEMANUAL,
    FI.QTYPECONFLICT,
    FI.QREISSUED,
    FI.QCANDIDATE,
    FI.QOPENED,
    FI.QANSWERED,
    FI.QCLOSED,
    FI.QDELETED,
    FI.ITEMCOMMENTS,
    FI.ITEMSDVCRITICAL,
    FI.ITEMSDVOVERRIDE,
    FI.ITEMSDVSELECTED,
    FI.BLANK
  FROM RT_ITEMSTATE FI,
    PF_SUBJECTVECHAPTER_CUR SVEC,
    (SELECT CONTEXTID,
      COUNT(*) AS IHREVS
    FROM PF_CONTEXTSTATEHISTORY
    GROUP BY CONTEXTID
    ) IH,
    (SELECT CONTEXTID,COUNT(*) AS IDREVS FROM PF_ITEMDATA GROUP BY CONTEXTID
    ) ID,
    (SELECT visitid, visitrev FROM RT_VISIT_REVS
    ) RVR,
    RT_INFORMREP RIR,
    PF_SITEVOLUMEEDITION_CUR SVE
  WHERE FI.SITEID      =SVE.SITEID(+)
  AND FI.SUBJECTVISITID=SVEC.SUBJECTCHAPTERID(+)
  AND IH.CONTEXTID(+)  =FI.CONTEXTID
  AND ID.CONTEXTID(+)  =FI.CONTEXTID
  AND FI.VISITID       =RVR.VISITID(+);

CREATE OR REPLACE VIEW IRV_IC_ROLLUP_FORMS
AS
SELECT F.SUBJECTID, F.VISITID, F.VISITINDEX,F.FORMID,F.FORMINDEX,F.FORMREV,
       F.SITEID,F.STUDYID,F.STUDYVERSIONID,F.SUBJECTFORM, F.SUBJECTVISITID,
       F.ITEMS,F.SECTIONITEMS,F.ITEMSETITEMS,F.FIRSTSDVTIME,F.LASTSDVTIME,F.FIRSTDATATIME,F.LASTDATATIME,F.FIRSTDATATRANSACTIONID,F.LASTDATATRANSACTIONID,
       F.FIRSTSTATETIME,F.LASTSTATETIME,F.FIRSTSTATETRANSACTIONID,F.LASTSTATETRANSACTIONID,
       F.ITEMSDELETED,
       F.ITEMSSDVED,F.ITEMSWITHDATA,
       F.CONTROLS,F.CONTROLSWITHDATA,F.QUERIES,F.QTYPEAUTO,F.QTYPEMANUAL,F.QTYPECONFLICT,F.QREISSUED,F.QCANDIDATE,F.QOPENED,F.QANSWERED,F.QCLOSED,F.QDELETED,
       F.ITEMCOMMENTS, NVL(FC.FORMCOMMENTS,0) FORMCOMMENTS  
FROM (SELECT SUBJECTID, VISITID, VISITINDEX,FORMID,FORMINDEX,FORMREV,
      MAX(SUBJECTVISITID) AS SUBJECTVISITID,
      MAX(SITEID) SITEID,
      MAX(STUDYID) STUDYID,
      MAX(STUDYVERSIONID) STUDYVERSIONID,
      1 AS SUBJECTFORM,
--       SUM(ITEM) AS CITEMS, 
--       SUM(SECTIONITEM) AS CSECTIONITEMS, 
--       SUM(ITEMSETITEM) AS CITEMSETITEMS, 
       COUNT(ITEM) AS ITEMS, 
       COUNT(SECTIONITEM) AS SECTIONITEMS, 
       COUNT(ITEMSETITEM) AS ITEMSETITEMS, 
       MIN(SDVTIME) AS FIRSTSDVTIME, 
       MAX(SDVTIME) AS LASTSDVTIME, 
       MIN(DATATIME) AS FIRSTDATATIME, 
       MAX(DATATIME) AS LASTDATATIME,
       MIN(DATATRANSACTIONID) AS FIRSTDATATRANSACTIONID, 
       MAX(DATATRANSACTIONID) AS LASTDATATRANSACTIONID,
       MIN(STATETIME) AS FIRSTSTATETIME, 
       MAX(STATETIME) AS LASTSTATETIME,
       MIN(STATETRANSACTIONID) AS FIRSTSTATETRANSACTIONID, 
       MAX(STATETRANSACTIONID) AS LASTSTATETRANSACTIONID,
       SUM(COALESCE(ITEMDELETED,0)) AS ITEMSDELETED, 
       SUM(COALESCE(ITEMSDVED,0)) AS ITEMSSDVED, 
       SUM(COALESCE(ITEMHASDATA,0)) AS ITEMSWITHDATA, 
       SUM(COALESCE(CONTROLS,0)) AS CONTROLS, 
       SUM(COALESCE(CONTROLSWITHDATA,0)) AS CONTROLSWITHDATA, 
       SUM(COALESCE(QUERIES,0)) AS QUERIES, 
       SUM(COALESCE(QTYPEAUTO,0)) AS QTYPEAUTO, 
       SUM(COALESCE(QTYPEMANUAL,0)) AS QTYPEMANUAL, 
       SUM(COALESCE(QTYPECONFLICT,0)) AS QTYPECONFLICT, 
       SUM(COALESCE(QREISSUED,0)) AS QREISSUED, 
       SUM(COALESCE(QCANDIDATE,0)) AS QCANDIDATE, 
       SUM(COALESCE(QOPENED,0)) AS QOPENED, 
       SUM(COALESCE(QANSWERED,0)) AS QANSWERED, 
       SUM(COALESCE(QCLOSED,0)) AS QCLOSED, 
       SUM(COALESCE(QDELETED,0)) AS QDELETED, 
       SUM(COALESCE(ITEMCOMMENTS,0)) AS ITEMCOMMENTS, 
       --COUNT(ITEMDELETED) AS CITEMSDELETED, 
       COUNT(ITEMSDVED) AS CITEMSSDVED, 
       COUNT(ITEMHASDATA) AS CITEMSWITHDATA, 
       COUNT(CONTROLS) AS CCONTROLS, 
       COUNT(CONTROLSWITHDATA) AS CCONTROLSWITHDATA, 
       COUNT(QUERIES) AS CQUERIES, 
       COUNT(QTYPEAUTO) AS CQTYPEAUTO, 
       COUNT(QTYPEMANUAL) AS CQTYPEMANUAL, 
       COUNT(QTYPECONFLICT) AS CQTYPECONFLICT, 
       COUNT(QREISSUED) AS CQREISSUED, 
       COUNT(QCANDIDATE) AS CQCANDIDATE, 
       COUNT(QOPENED) AS CQOPENED, 
       COUNT(QANSWERED) AS CQANSWERED, 
       COUNT(QCLOSED) AS CQCLOSED, 
       COUNT(QDELETED) AS CQDELETED, 
       COUNT(ITEMCOMMENTS) AS CITEMCOMMENTS 
FROM (SELECT a.*, b.volumeeditionid AS STUDYVERSIONID, c.STUDYID FROM RT_ITEMSTATE a, PF_SITEVOLUMEEDITION_CUR b, RT_INFORMREP c WHERE a.SITEID=b.SITEID)
GROUP BY 
--AFROWID 
SUBJECTID,VISITID,VISITINDEX,FORMID,FORMINDEX,FORMREV
) F,
      (select SUBJECTID,VISITID,VISITINDEX,FORMID,FORMINDEX,FORMREV,sum(cformcomment) as formcomments
       from rt_comment group by SUBJECTID,VISITID,VISITINDEX,FORMID,FORMINDEX,FORMREV) FC
WHERE --F.AFROWID = FC.AFROWID (+)
F.SUBJECTID = FC.SUBJECTID (+)
AND F.VISITID = FC.VISITID (+)
AND F.VISITINDEX = FC.VISITINDEX (+)
AND F.FORMID = FC.FORMID (+)
AND F.FORMINDEX = FC.FORMINDEX (+)
AND F.FORMREV = FC.FORMREV (+);
  

CREATE OR REPLACE VIEW IRV_IC_ROLLUP_VISITS
AS
SELECT 1 AS SUBJECTVISIT,
--ADD SUBJECTVISITID
       SUBJECTVISITID,
       SUM(SUBJECTFORM) AS SUBJECTFORMS,
       SUM(ITEMS) AS ITEMS, 
       SUM(SECTIONITEMS) AS SECTIONITEMS, 
       SUM(ITEMSETITEMS) AS ITEMSETITEMS, 
       MIN(FIRSTSDVTIME) AS FIRSTSDVTIME, 
       MAX(LASTSDVTIME) AS LASTSDVTIME, 
       MIN(FIRSTDATATIME) AS FIRSTDATATIME, 
       MAX(LASTDATATIME) AS LASTDATATIME,
       MIN(FIRSTDATATRANSACTIONID) AS FIRSTDATATRANSACTIONID, 
       MAX(LASTDATATRANSACTIONID) AS LASTDATATRANSACTIONID,
       MIN(FIRSTSTATETIME) AS FIRSTSTATETIME, 
       MAX(LASTSTATETIME) AS LASTSTATETIME,
       MIN(FIRSTSTATETRANSACTIONID) AS FIRSTSTATETRANSACTIONID, 
       MAX(LASTSTATETRANSACTIONID) AS LASTSTATETRANSACTIONID,
       --SUM(ITEMSDELETED) AS ITEMSDELETED, 
       SUM(ITEMSSDVED) AS ITEMSSDVED, 
       SUM(ITEMSWITHDATA) AS ITEMSWITHDATA, 
       SUM(CONTROLS) AS CONTROLS, 
       SUM(CONTROLSWITHDATA) AS CONTROLSWITHDATA, 
       SUM(QUERIES) AS QUERIES, 
       SUM(QTYPEAUTO) AS QTYPEAUTO, 
       SUM(QTYPEMANUAL) AS QTYPEMANUAL, 
       SUM(QTYPECONFLICT) AS QTYPECONFLICT, 
       SUM(QREISSUED) AS QREISSUED, 
       SUM(QCANDIDATE) AS QCANDIDATE, 
       SUM(QOPENED) AS QOPENED, 
       SUM(QANSWERED) AS QANSWERED, 
       SUM(QCLOSED) AS QCLOSED, 
       SUM(QDELETED) AS QDELETED, 
       SUM(ITEMCOMMENTS) AS ITEMCOMMENTS, 
       SUM(FORMCOMMENTS) AS FORMCOMMENTS
FROM IRV_IC_ROLLUP_FORMS FORMS
GROUP BY --CSVROWID
SUBJECTVISITID;

CREATE OR REPLACE VIEW IRV_IC_ROLLUP_SUBJECTS
AS
SELECT 1 AS SUBJECT,
       SUBJECTID,
       COUNT(DISTINCT SUBJECTVISITID) AS SUBJECTVISITS,
       COUNT(*) AS SUBJECTFORMS,   
       SUM(ITEMS) AS ITEMS, 
       SUM(SECTIONITEMS) AS SECTIONITEMS, 
       SUM(ITEMSETITEMS) AS ITEMSETITEMS, 
       MIN(FIRSTSDVTIME) AS FIRSTSDVTIME, 
       MAX(LASTSDVTIME) AS LASTSDVTIME, 
       MIN(FIRSTDATATIME) AS FIRSTDATATIME, 
       MAX(LASTDATATIME) AS LASTDATATIME,
       MIN(FIRSTDATATRANSACTIONID) AS FIRSTDATATRANSACTIONID, 
       MAX(LASTDATATRANSACTIONID) AS LASTDATATRANSACTIONID,
       MIN(FIRSTSTATETIME) AS FIRSTSTATETIME, 
       MAX(LASTSTATETIME) AS LASTSTATETIME,
       MIN(FIRSTSTATETRANSACTIONID) AS FIRSTSTATETRANSACTIONID, 
       MAX(LASTSTATETRANSACTIONID) AS LASTSTATETRANSACTIONID,
       --SUM(ITEMSDELETED) AS ITEMSDELETED, 
       SUM(ITEMSSDVED) AS ITEMSSDVED, 
       SUM(ITEMSWITHDATA) AS ITEMSWITHDATA, 
       SUM(CONTROLS) AS CONTROLS, 
       SUM(CONTROLSWITHDATA) AS CONTROLSWITHDATA, 
       SUM(QUERIES) AS QUERIES, 
       SUM(QTYPEAUTO) AS QTYPEAUTO, 
       SUM(QTYPEMANUAL) AS QTYPEMANUAL, 
       SUM(QTYPECONFLICT) AS QTYPECONFLICT, 
       SUM(QREISSUED) AS QREISSUED, 
       SUM(QCANDIDATE) AS QCANDIDATE, 
       SUM(QOPENED) AS QOPENED, 
       SUM(QANSWERED) AS QANSWERED, 
       SUM(QCLOSED) AS QCLOSED, 
       SUM(QDELETED) AS QDELETED, 
       SUM(ITEMCOMMENTS) AS ITEMCOMMENTS, 
       SUM(FORMCOMMENTS) AS FORMCOMMENTS
FROM IRV_IC_ROLLUP_FORMS
GROUP BY SUBJECTID;

CREATE OR REPLACE VIEW IRV_IC_ROLLUP_SITES
AS
SELECT 1 AS SITE,
       SITEID,
       COUNT(DISTINCT SUBJECTVISITID) AS SUBJECTVISITS,
       COUNT(*) AS SUBJECTFORMS,
       SUM(ITEMS) AS ITEMS, 
       SUM(SECTIONITEMS) AS SECTIONITEMS, 
       SUM(ITEMSETITEMS) AS ITEMSETITEMS, 
       MIN(FIRSTSDVTIME) AS FIRSTSDVTIME, 
       MAX(LASTSDVTIME) AS LASTSDVTIME, 
       MIN(FIRSTDATATIME) AS FIRSTDATATIME, 
       MAX(LASTDATATIME) AS LASTDATATIME,
       MIN(FIRSTDATATRANSACTIONID) AS FIRSTDATATRANSACTIONID, 
       MAX(LASTDATATRANSACTIONID) AS LASTDATATRANSACTIONID,
       MIN(FIRSTSTATETIME) AS FIRSTSTATETIME, 
       MAX(LASTSTATETIME) AS LASTSTATETIME,
       MIN(FIRSTSTATETRANSACTIONID) AS FIRSTSTATETRANSACTIONID, 
       MAX(LASTSTATETRANSACTIONID) AS LASTSTATETRANSACTIONID,
       --SUM(ITEMSDELETED) AS ITEMSDELETED, 
       SUM(ITEMSSDVED) AS ITEMSSDVED, 
       SUM(ITEMSWITHDATA) AS ITEMSWITHDATA, 
       SUM(CONTROLS) AS CONTROLS, 
       SUM(CONTROLSWITHDATA) AS CONTROLSWITHDATA, 
       SUM(QUERIES) AS QUERIES, 
       SUM(QTYPEAUTO) AS QTYPEAUTO, 
       SUM(QTYPEMANUAL) AS QTYPEMANUAL, 
       SUM(QTYPECONFLICT) AS QTYPECONFLICT, 
       SUM(QREISSUED) AS QREISSUED, 
       SUM(QCANDIDATE) AS QCANDIDATE, 
       SUM(QOPENED) AS QOPENED, 
       SUM(QANSWERED) AS QANSWERED, 
       SUM(QCLOSED) AS QCLOSED, 
       SUM(QDELETED) AS QDELETED, 
       SUM(ITEMCOMMENTS) AS ITEMCOMMENTS, 
       SUM(FORMCOMMENTS) AS FORMCOMMENTS
FROM IRV_IC_ROLLUP_FORMS
GROUP BY SITEID;

CREATE OR REPLACE VIEW IRV_IC_ROLLUP_STUDYVERSIONS
AS
SELECT 1 AS STUDYVERSION,
       STUDYVERSIONID,
       COUNT(DISTINCT SUBJECTVISITID) AS SUBJECTVISITS,
       COUNT(*) AS SUBJECTFORMS,
       SUM(ITEMS) AS ITEMS, 
       SUM(SECTIONITEMS) AS SECTIONITEMS, 
       SUM(ITEMSETITEMS) AS ITEMSETITEMS, 
       MIN(FIRSTSDVTIME) AS FIRSTSDVTIME, 
       MAX(LASTSDVTIME) AS LASTSDVTIME, 
       MIN(FIRSTDATATIME) AS FIRSTDATATIME, 
       MAX(LASTDATATIME) AS LASTDATATIME,
       MIN(FIRSTDATATRANSACTIONID) AS FIRSTDATATRANSACTIONID, 
       MAX(LASTDATATRANSACTIONID) AS LASTDATATRANSACTIONID,
       MIN(FIRSTSTATETIME) AS FIRSTSTATETIME, 
       MAX(LASTSTATETIME) AS LASTSTATETIME,
       MIN(FIRSTSTATETRANSACTIONID) AS FIRSTSTATETRANSACTIONID, 
       MAX(LASTSTATETRANSACTIONID) AS LASTSTATETRANSACTIONID,
       --SUM(ITEMSDELETED) AS ITEMSDELETED, 
       SUM(ITEMSSDVED) AS ITEMSSDVED, 
       SUM(ITEMSWITHDATA) AS ITEMSWITHDATA, 
       SUM(CONTROLS) AS CONTROLS, 
       SUM(CONTROLSWITHDATA) AS CONTROLSWITHDATA, 
       SUM(QUERIES) AS QUERIES, 
       SUM(QTYPEAUTO) AS QTYPEAUTO, 
       SUM(QTYPEMANUAL) AS QTYPEMANUAL, 
       SUM(QTYPECONFLICT) AS QTYPECONFLICT, 
       SUM(QREISSUED) AS QREISSUED, 
       SUM(QCANDIDATE) AS QCANDIDATE, 
       SUM(QOPENED) AS QOPENED, 
       SUM(QANSWERED) AS QANSWERED, 
       SUM(QCLOSED) AS QCLOSED, 
       SUM(QDELETED) AS QDELETED, 
       SUM(ITEMCOMMENTS) AS ITEMCOMMENTS, 
       SUM(FORMCOMMENTS) AS FORMCOMMENTS
FROM IRV_IC_ROLLUP_FORMS
GROUP BY STUDYVERSIONID;

CREATE OR REPLACE VIEW IRV_IC_ROLLUP_STUDY
AS
SELECT 1 AS STUDY,
       STUDYID,
       COUNT(DISTINCT SUBJECTVISITID) AS SUBJECTVISITS,
       COUNT(*) AS SUBJECTFORMS,
       SUM(ITEMS) AS ITEMS, 
       SUM(SECTIONITEMS) AS SECTIONITEMS, 
       SUM(ITEMSETITEMS) AS ITEMSETITEMS, 
       MIN(FIRSTSDVTIME) AS FIRSTSDVTIME, 
       MAX(LASTSDVTIME) AS LASTSDVTIME, 
       MIN(FIRSTDATATIME) AS FIRSTDATATIME, 
       MAX(LASTDATATIME) AS LASTDATATIME,
       MIN(FIRSTDATATRANSACTIONID) AS FIRSTDATATRANSACTIONID, 
       MAX(LASTDATATRANSACTIONID) AS LASTDATATRANSACTIONID,
       MIN(FIRSTSTATETIME) AS FIRSTSTATETIME, 
       MAX(LASTSTATETIME) AS LASTSTATETIME,
       MIN(FIRSTSTATETRANSACTIONID) AS FIRSTSTATETRANSACTIONID, 
       MAX(LASTSTATETRANSACTIONID) AS LASTSTATETRANSACTIONID,
       --SUM(ITEMSDELETED) AS ITEMSDELETED, 
       SUM(ITEMSSDVED) AS ITEMSSDVED, 
       SUM(ITEMSWITHDATA) AS ITEMSWITHDATA, 
       SUM(CONTROLS) AS CONTROLS, 
       SUM(CONTROLSWITHDATA) AS CONTROLSWITHDATA, 
       SUM(QUERIES) AS QUERIES, 
       SUM(QTYPEAUTO) AS QTYPEAUTO, 
       SUM(QTYPEMANUAL) AS QTYPEMANUAL, 
       SUM(QTYPECONFLICT) AS QTYPECONFLICT, 
       SUM(QREISSUED) AS QREISSUED, 
       SUM(QCANDIDATE) AS QCANDIDATE, 
       SUM(QOPENED) AS QOPENED, 
       SUM(QANSWERED) AS QANSWERED, 
       SUM(QCLOSED) AS QCLOSED, 
       SUM(QDELETED) AS QDELETED, 
       SUM(ITEMCOMMENTS) AS ITEMCOMMENTS, 
       SUM(FORMCOMMENTS) AS FORMCOMMENTS
FROM IRV_IC_ROLLUP_FORMS
GROUP BY STUDYID;


--REPORTVIEWS

CREATE OR REPLACE VIEW IRV_SV_SUBJECTVISITS_EXPSTART
AS
SELECT SSVV.SUBJECTID, SSVV.SUBJECTSTATE,--SSVV.STUDYID,
       SSVV.SITEID, SSVV.STUDYVERSIONID, SSVV.VISITID, SSVV.VISITREV,
       COALESCE(CSV.VISITINDEX,0) AS VISITINDEX,
       CSV.SUBJECTVISITID,
       SSVV.VISITINCURSV,SSVV.VISITORDER,SSVV.STARTHOURSFROMPREVIOUS,SH.STARTHOURSFROMENROLL,
       SSVV.VISITTYPE,SSVV.VTSUBJECTVISIT,SSVV.VTCOMMONCRF,
       SSVV.VISITPROPERTIES,SSVV.VISITSCHEDULED,SSVV.VISITSREPEATING,SSVV.VISITDYNAMIC,
       CASE WHEN (SSVV.SUBJECTSTATE IN (4,5) OR
                  (SSVV.SUBJECTSTATE IN (6,7) AND CSV.VISITINDEX > 0))  -- COMPLETED OR DROPPED OUT GETS NULL DATE FOR UNSTARTED
                 AND ((SSVV.VTSUBJECTVISIT = 1 AND SSVV.VISITSCHEDULED = 1) /* SCHEDULED CRF VISIT */
                      OR SSVV.VTCOMMONCRF = 1 /* COMMON VISIT */ )
            THEN SSVV.SUBJECTENROLLDATE + (SH.STARTHOURSFROMENROLL/24)
            ELSE CASE WHEN SSVV.VISITDYNAMIC = 1 AND (SSVV.SUBJECTSTATE IN (4,5) OR SSVV.SUBJECTSTATE IN (6,7) AND CSV.VISIT_FIRST_ENTRY is not null)
            THEN SSVV.SUBJECTENROLLDATE + (CSV.PROJECTEDSTARTHOURS/24)
            ELSE NULL
       END END EXPECTEDSTARTDATE,
       SVEC.STARTDATETIME,
       SVEC.SUBJECTCHAPTERREVISIONNUMBER AS SUBJECTVISITREV,
       CSV.VISIT_FIRST_ENTRY, CSV.VISIT_LAST_ENTRY, 
       CSV.ACTUALDATETIME AS DOV, CSV.ACTUALDTMASK AS DOVDTMASK, CSV.DELETED,
       CSV.PROJECTEDSTARTHOURS 
FROM IRV_S_V_SV SSVV,
     PF_SUBJECTVECHAPTER_CUR SVEC,
     (SELECT STUDYVERSIONID,VISITID,SUM(STARTHOURSFROMPREVIOUS) OVER (PARTITION BY STUDYVERSIONID ORDER BY VISITORDER) STARTHOURSFROMENROLL
      FROM IRV_STUDYVERSION_VISITS
      WHERE VISITSCHEDULED = 1) SH,
     RT_SUBJECTVISIT CSV
WHERE SSVV.STUDYVERSIONID = SH.STUDYVERSIONID (+)
AND SSVV.VISITID = SH.VISITID (+)
AND SSVV.SUBJECTID = CSV.SUBJECTID (+)
AND SSVV.VISITID = CSV.VISITID (+)
AND (CSV.DELETED IS NULL OR CSV.DELETED = 0)
AND CSV.SUBJECTVISITID = SVEC.SUBJECTCHAPTERID (+)
;

-- rollup expected form states to a visit state
CREATE OR REPLACE VIEW IRV_SV_SUBJECTVISITS_EXPECTED
AS
select
       COALESCE(SV.SUBJECTVISITID,AF.SUBJECTVISITID) AS SUBJECTVISITID, 
       /* EXPECTED FORMS */
       sum(CASE WHEN SUBJECTSTATE >= 4 AND SVF.FORMTYPE = 1 AND (VTSUBJECTVISIT = 1 OR VTCOMMONCRF = 1)
            /* SUBJECT ENROLLED, FORM TYPE CRF, VISIT TYPE CRF OR COMMON */
       THEN
           CASE WHEN SVAF.FORMINDEX > 0
                /* STARTED FORM:  ALWAYS EXPECTED EXCEPT FOR DELETED FORM (OR DELETED DYNAMIC which is excluded in WHERE clause) */
           THEN
                CASE WHEN DELETEDSTATE IS NULL OR DELETEDSTATE = 0
                THEN 1
                ELSE 0
                END
           ELSE
               CASE WHEN SV.VISIT_FIRST_ENTRY IS NOT NULL 
                    /* UNSTARTED FORM, STARTED VISIT:  NON-DYNAMIC FORMS ARE EXPECTED (INCLUDES REPEATING) */
               THEN
                    CASE WHEN DYNAMICFORM = 0 AND (ALTFORM = 0 OR
                                                   (ALTFORM = 1 AND EXISTS (SELECT PAGEINDEX
                                                                     FROM PF_SUBJECTVECHAPTERPAGE SVECP
                                                                     WHERE COALESCE(SV.SUBJECTVISITID,AF.SUBJECTVISITID) = SUBJECTCHAPTERID
                                                                     AND ALTFORMID = PAGEID
                                                                     AND ALTFORMREV = PAGEREVISIONNUMBER))) AND
                               (VTSUBJECTVISIT = 1 OR
                                  /* Non-started common forms are not expected if Subject Dropped Out or Completed */                               
                                      (VTCOMMONCRF = 1 AND (STARTEDSTATE=1 OR SUBJECTSTATE IN (4,5)))   
                                )
                    THEN 1
                    ELSE 0
                    END
               ELSE
                    /* UNSTARTED, SCHEDULED VISIT or Activated non-started dynamic visit:  NON-ALT, NON-DYNAMIC FORMS ARE EXPECTED
                       (COMPLETE AND DROPOUT HAVE PROJECTED DATE NULLED OUT).                  
                       Common, non-dynamic forms for active subjects are expected.                 */
                   CASE WHEN ( (VISITSCHEDULED = 1 or VISITDYNAMIC=1) AND EXPECTEDSTARTDATE IS NOT NULL
                                          AND ALTFORM = 0 AND DYNAMICFORM = 0) 
                          OR (COMMONFORM = 1 AND DYNAMICFORM=0 AND SUBJECTSTATE IN (4,5) )
                   THEN 1
                   ELSE 0
                   END
               END
           END
       ELSE 0
       END) AS EXPECTEDFORMS,
       sum(SDVCOMPLETESTATE) AS EXPFORMSSDVCOMPLETE, 
       sum(LOCKEDSTATE) AS EXPFORMSLOCKED,
       sum(FROZENSTATE) AS EXPFORMSFROZEN,
       sum(SIGNEDSTATE) AS EXPFORMSSIGNED,
       sum(COMPLETESTATE)AS EXPFORMSCOMPLETE
FROM IRV_SV_ACTUAL_FORMS SVAF,
     IRV_SV_SUBJECTVISITS_EXPSTART SV,
     RT_ACTIVATED_FORMS AF,
     IRV_STUDYVERSION_FORMS SVF
WHERE --SVAF.AFROWID = AF.ROWID (+) 
SVAF.SUBJECTID = AF.SUBJECTID (+)
AND SVAF.VISITID = AF.VISITID (+)
AND SVAF.VISITINDEX = AF.VISITINDEX (+)
AND SVAF.FORMID = AF.FORMID (+)
AND SVAF.FORMINDEX = AF.FORMINDEX (+)
AND SVAF.FORMREV = AF.FORMREV (+)
and COALESCE(SV.SUBJECTVISITID,AF.SUBJECTVISITID)>0
AND SVAF.STUDYVERSIONID = SVF.STUDYVERSIONID (+)
AND SVAF.VISITID = SVF.VISITID (+)
AND SVAF.FORMID = SVF.FORMID (+)
AND SVAF.SUBJECTID = SV.SUBJECTID
AND SVAF.SITEID = SV.SITEID
AND SVAF.STUDYVERSIONID = SV.STUDYVERSIONID
AND SVAF.VISITID = SV.VISITID
AND (SVAF.VISITINDEX = 0 OR SVAF.VISITINDEX = SV.VISITINDEX )
AND SVF.FORMTYPE NOT IN (4,5,6,7,8,103)
AND (DELETEDDYNAMICFORMSTATE IS NULL OR DELETEDDYNAMICFORMSTATE = 0)
group by COALESCE(SV.SUBJECTVISITID,AF.SUBJECTVISITID)
;

CREATE OR REPLACE VIEW IRV_SV_SUBJECTVISITS
AS
SELECT  1 AS SUBJECTVISITCOUNT,
       SSVV.SUBJECTID, SSVV.SUBJECTSTATE,--SSVV.STUDYID,
       SSVV.SITEID, SSVV.STUDYVERSIONID, SSVV.VISITID, VISITREV,
       COALESCE(CSV.VISITINDEX,0) AS VISITINDEX,
       NVL2(CSV.SUBJECTVISITID,ROW_NUMBER() OVER (PARTITION BY CSV.SUBJECTID,CSV.VISITID ORDER BY VISITINDEX),0) AS VISITORDINAL,
       CSV.SUBJECTVISITID,
       NVL2(CSV.SUBJECTVISITID,1,0) AS VISITACTIVATED,
       SSVV.VISITINCURSV, SSVV.VISITORDER, SSVV.STARTHOURSFROMPREVIOUS, SH.STARTHOURSFROMENROLL,
       SSVV.VISITTYPE, SSVV.VTSUBJECTVISIT,SSVV.VTCOMMONCRF,
       SSVV.VISITPROPERTIES, SSVV.VISITSCHEDULED, SSVV.VISITSREPEATING, SSVV.VISITDYNAMIC,
       CASE WHEN (SSVV.SUBJECTSTATE IN (4,5) OR
                  (SSVV.SUBJECTSTATE IN (6,7) AND VISITINDEX > 0))  -- COMPLETED OR DROPPED OUT GETS NULL DATE FOR UNSTARTED
                 AND ((VTSUBJECTVISIT = 1 AND VISITSCHEDULED = 1) /* SCHEDULED CRF VISIT */
                      OR VTCOMMONCRF = 1 /* COMMON VISIT */ )
            THEN SSVV.SUBJECTENROLLDATE + (SH.STARTHOURSFROMENROLL/24)
            ELSE CASE WHEN SSVV.VISITDYNAMIC = 1 AND (SSVV.SUBJECTSTATE IN (4,5) OR SSVV.SUBJECTSTATE IN (6,7) AND CSV.VISIT_FIRST_ENTRY is not null)
            THEN SSVV.SUBJECTENROLLDATE + (CSV.PROJECTEDSTARTHOURS/24)
            ELSE NULL
       END END EXPECTEDSTARTDATE,
       CSV.VISIT_FIRST_ENTRY, CSV.VISIT_LAST_ENTRY, CSV.PROJECTEDSTARTHOURS, 
       SVEC.STARTDATETIME, 
       SVEC.SUBJECTCHAPTERREVISIONNUMBER AS SUBJECTVISITREV,
       CSV.ACTUALDATETIME AS DOV, CSV.ACTUALDTMASK AS DOVDTMASK,
       CSV.DELETED,
       CSV.USERID, CSV.SVTIME, CSV.TRANSACTIONID, CSV.REASON,
       DECODE(EXPECTEDFORMS,null,0,0,0,EXPFORMSCOMPLETE,1,0) AS VISITCOMPLETE,
       DECODE(EXPECTEDFORMS,null,0,0,0,EXPFORMSFROZEN,1,0) AS VISITFROZEN,
       DECODE(EXPECTEDFORMS,null,0,0,0,EXPFORMSSDVCOMPLETE,1,0) AS VISITSDVCOMPLETE,
       DECODE(EXPECTEDFORMS,null,0,0,0,EXPFORMSSIGNED,1,0) AS VISITSIGNED,
       DECODE(EXPECTEDFORMS,null,0,0,0,EXPFORMSLOCKED,1,0) AS VISITLOCKED
FROM IRV_S_V_SV SSVV,
     (SELECT STUDYVERSIONID,VISITID,SUM(STARTHOURSFROMPREVIOUS) OVER (PARTITION BY STUDYVERSIONID ORDER BY VISITORDER) STARTHOURSFROMENROLL 
      FROM RT_STUDYVERSION_VISITS
      WHERE VISITSCHEDULED = 1) SH,
     RT_SUBJECTVISIT CSV,
     PF_SUBJECTVECHAPTER_CUR SVEC,
     IRV_SV_SUBJECTVISITS_EXPECTED EFAF
WHERE SSVV.STUDYVERSIONID = SH.STUDYVERSIONID (+)
AND SSVV.VISITID = SH.VISITID (+)
AND SSVV.SUBJECTID = CSV.SUBJECTID (+)
AND SSVV.VISITID = CSV.VISITID (+)
AND CSV.SUBJECTVISITID = EFAF.SUBJECTVISITID (+)
AND (CSV.DELETED IS NULL OR CSV.DELETED = 0)
AND CSV.SUBJECTVISITID = SVEC.SUBJECTCHAPTERID (+)
;

CREATE OR REPLACE VIEW IRV_SV_SUBJECT_FORMS
AS 
SELECT 1 AS FORMCOUNT,SVAF.SUBJECTID, SV.SUBJECTSTATE, SVAF.SITEID, --SVAF.STUDYID,
       SVAF.STUDYVERSIONID,SVAF.VISITID,COALESCE(SVF.VISITREV,SV.VISITREV) AS VISITREV,SV.VISITORDER,SV.VISITTYPE,
       COALESCE(SV.VISITINDEX,AF.VISITINDEX,SVAF.VISITINDEX) AS VISITINDEX, COALESCE(SV.SUBJECTVISITID,AF.SUBJECTVISITID) AS SUBJECTVISITID,
       COALESCE(SV.SUBJECTVISITREV,SVEC.SUBJECTCHAPTERREVISIONNUMBER) AS SUBJECTVISITREV, 
       COALESCE(SVAF.FORMID,AF.FORMID,SVF.FORMID) AS FORMID, 
       COALESCE(SVAF.FORMREV,AF.FORMREV,SVF.FORMREV) AS FORMREV,
       COALESCE(AF.FORMINDEX,SVAF.FORMINDEX) AS FORMINDEX,
       AF.INFORMACTIVATIONTIME,SV.DOV, SV.DOVDTMASK,SV.VISIT_FIRST_ENTRY,
       COALESCE(SV.DELETED,0) AS VISITDELETED,
       SV.EXPECTEDSTARTDATE,
       SVF.FORMORDER,SVF.DYNAMICFORM AS FORMDYNAMIC,SVF.REPEATINGFORM AS FORMREPEATING,
       SVF.COMMONFORM AS FORMCOMMON, SVF.ALTFORM,SVF.EXPECTINGALTFORM,SVF.ALTFORMID,SVF.ALTFORMREV,
       FRI.HASREQUIREDITEMS, FRI.HASSDVREQUIREDITEMS,
       /* EXPECTED FORMS */
       CASE WHEN SV.SUBJECTSTATE >= 4 AND SVF.FORMTYPE = 1 AND (SV.VTSUBJECTVISIT = 1 OR SV.VTCOMMONCRF = 1)
            /* SUBJECT ENROLLED, FORM TYPE CRF, VISIT TYPE CRF OR COMMON */
       THEN
           CASE WHEN SVAF.FORMINDEX > 0
                /* STARTED FORM:  ALWAYS EXPECTED EXCEPT FOR DELETED FORM (OR DELETED DYNAMIC which is excluded in WHERE clause) */
           THEN
                CASE WHEN AF.DELETEDSTATE IS NULL OR AF.DELETEDSTATE = 0
                THEN 1
                ELSE 0
                END
           ELSE
               CASE WHEN SV.VISIT_FIRST_ENTRY IS NOT NULL
                    /* UNSTARTED FORM, STARTED VISIT:  NON-DYNAMIC FORMS ARE EXPECTED (INCLUDES REPEATING) */
               THEN
                    CASE WHEN SVF.DYNAMICFORM = 0 AND (ALTFORM = 0 OR
                                                   (ALTFORM = 1 AND EXISTS (SELECT PAGEINDEX
                                                                     FROM PF_SUBJECTVECHAPTERPAGE SVECP
                                                                     WHERE COALESCE(SV.SUBJECTVISITID,AF.SUBJECTVISITID) = SUBJECTCHAPTERID
                                                                     AND ALTFORMID = PAGEID
                                                                     AND ALTFORMREV = PAGEREVISIONNUMBER))) AND
                               (SV.VTSUBJECTVISIT = 1 OR
                                  /* Non-started common forms are not expected if Subject Dropped Out or Completed */
                                      (VTCOMMONCRF = 1 AND (STARTEDSTATE=1 OR SUBJECTSTATE IN (4,5)))
                                )
                    THEN 1
                    ELSE 0
                    END
               ELSE
                    /* UNSTARTED, SCHEDULED VISIT or Activated non-started dynamic visit:  NON-ALT, NON-DYNAMIC FORMS ARE EXPECTED
                       (COMPLETE AND DROPOUT HAVE PROJECTED DATE NULLED OUT).
                       Common, non-dynamic forms for active subjects are expected.                 */
                   CASE WHEN ( (VISITSCHEDULED = 1 or VISITDYNAMIC=1) AND EXPECTEDSTARTDATE IS NOT NULL
                                          AND ALTFORM = 0 AND DYNAMICFORM = 0)
                          OR (COMMONFORM = 1 AND DYNAMICFORM=0 AND SUBJECTSTATE IN (4,5) )
                   THEN 1
                   ELSE 0
                   END
               END
           END
       ELSE 0
       END AS EXPECTEDFORM,
       FHREVS, MINFORMHISTORYID, MINFORMHISTORYREV, MAXFORMHISTORYID, MAXFORMHISTORYREV,
       AF.PFTIMESTAMP AS FORMHISTORYTIME, 
       AF.HISTORICALORDER, AF.USERID, AF.TRANSACTIONID, AF.REASON,AF.STATEHIST, AF.ORIGINALSTATE, AF.ACTION,
       STARTEDSTATE, FMINSTARTEDSTATE, FMAXSTARTEDSTATE,
       SDVREADYSTATE, FMINSDVREADYSTATE, FMAXSDVREADYSTATE,
       SDVPARTIALSTATE, FMINSDVPARTIALSTATE, FMAXSDVPARTIALSTATE,
       SDVCOMPLETESTATE, FMINSDVCOMPLETESTATE, FMAXSDVCOMPLETESTATE,
       SDVSELECTEDSTATE, LOCKEDSTATE, FMINLOCKEDSTATE, FMAXLOCKEDSTATE,
       FROZENSTATE, FMINFROZENSTATE, FMAXFROZENSTATE,
       SIGNEDSTATE, FMINSIGNEDSTATE, FMAXSIGNEDSTATE,
       COMPLETESTATE, FMINCOMPLETESTATE, FMAXCOMPLETESTATE,
       HASQUERIESSTATE, FMINHASQUERIESSTATE, FMAXHASQUERIESSTATE,
       HASCOMMENTSSTATE, FMINHASCOMMENTSSTATE, FMAXHASCOMMENTSSTATE,
       HASDATASTATE, FMINHASDATASTATE, FMAXHASDATASTATE,
       MISSINGITEMSSTATE, FMINMISSINGITEMSSTATE, FMAXMISSINGITEMSSTATE,
       NOTDONESTATE, FMINNOTDONESTATE, FMAXNOTDONESTATE,
       DELETEDSTATE, FMINDELETEDSTATE, FMAXDELETEDSTATE,
       DELETEDDYNAMICFORMSTATE, FMINDELETEDDYNAMICFORMSTATE, FMAXDELETEDDYNAMICFORMSTATE,
       BOOKSIGN, FMINBOOKSIGN, FMAXBOOKSIGN, INFORMPARTIALURL_CRFVIEW,
       DECODE(COMPLETESTATE,0,(NVL2(SV.DOV,TRUNC(SYSDATE-SV.DOV,0),NULL)),NULL) AS FDAYSSINCEDOV,
       DECODE(COMPLETESTATE,0,(NVL2(FMINSTARTEDSTATE,TRUNC(SYSDATE-FMINSTARTEDSTATE,0),NULL)),NULL) AS FDAYSSINCESTART,
       NVL2(FMINSTARTEDSTATE,TRUNC(FMINSTARTEDSTATE-SV.DOV,0),NULL) AS FDAYSDOVTOSTART,
       NVL2(FMAXCOMPLETESTATE,TRUNC(FMAXCOMPLETESTATE-SV.DOV,0),NULL) AS FDAYSDOVTOCOMPLETE,
       NVL2(FMAXCOMPLETESTATE,TRUNC(FMAXCOMPLETESTATE-FMINSTARTEDSTATE,0),NULL) AS FDAYSSTARTTOCOMPLETE,
       NVL2(FMAXFROZENSTATE,TRUNC(FMAXFROZENSTATE-FMINCOMPLETESTATE,0),NULL) AS FDAYSCOMPLETETOFROZEN,
       NVL2(FMAXSDVREADYSTATE,TRUNC(FMAXSDVREADYSTATE-FMINCOMPLETESTATE,0),NULL) AS FDAYSCOMPLETETOSDVREADY,
       NVL2(FMAXSDVCOMPLETESTATE,TRUNC(FMAXSDVCOMPLETESTATE-FMINCOMPLETESTATE,0),NULL) AS FDAYSCOMPLETETOSDVCOMPLETE,
       NVL2(FMAXSIGNEDSTATE,TRUNC(FMAXSIGNEDSTATE-FMINCOMPLETESTATE,0),NULL) AS FDAYSCOMPLETETOSIGNED,
       NVL2(FMAXSDVCOMPLETESTATE,TRUNC(FMAXSDVCOMPLETESTATE-FMINSIGNEDSTATE,0),NULL) AS FDAYSSIGNTOSDVCOMPLETE,
       NVL2(FMAXSDVCOMPLETESTATE,TRUNC(FMAXSDVCOMPLETESTATE-FMINSDVREADYSTATE,0),NULL) AS FDAYSSDVREADYTOSDVCOMPLETE,
       NVL2(FMAXSDVCOMPLETESTATE,TRUNC(FMAXSDVCOMPLETESTATE-FMINFROZENSTATE,0),NULL) AS FDAYSFROZENTOSDVCOMPLETE,
       NVL2(FMAXSIGNEDSTATE,TRUNC(FMAXSIGNEDSTATE-FMINSDVCOMPLETESTATE,0),NULL) AS FDAYSSDVCOMPLETETOSIGN,
       NVL2(FMAXLOCKEDSTATE,TRUNC(FMAXLOCKEDSTATE-FMINSIGNEDSTATE,0),NULL) AS FDAYSSIGNTOLOCK,
       NVL2(FMAXLOCKEDSTATE,TRUNC(FMAXLOCKEDSTATE-FMINCOMPLETESTATE,0),NULL) AS FDAYSCOMPLETETOLOCK,
       LASTDATATIME,
       QUERIES, QTYPEAUTO, QTYPEMANUAL, QTYPECONFLICT, QREISSUED, QCANDIDATE, QOPENED, QANSWERED, QCLOSED, QDELETED,
       CASE WHEN QANSWERED > 0
            THEN 1
            ELSE 0
       END AS HASANSWEREDQUERY,
       ITEMCOMMENTS, FORMCOMMENTS,
       CASE WHEN ITEMCOMMENTS > 0
            THEN 1
            ELSE 0
       END AS HASITEMCOMMENT,
    DECODE (AF.REVIEWSTATE1, 0, 1, 0) REVIEWSTATE1STAGE1,
    DECODE (AF.REVIEWSTATE1, 1, 1, 0) REVIEWSTATE1STAGE2,
    DECODE (AF.REVIEWSTATE1, 2, 1, 0) REVIEWSTATE1STAGE3,
    DECODE (AF.REVIEWSTATE2, 0, 1, 0) REVIEWSTATE2STAGE1,
    DECODE (AF.REVIEWSTATE2, 1, 1, 0) REVIEWSTATE2STAGE2,
    DECODE (AF.REVIEWSTATE2, 2, 1, 0) REVIEWSTATE2STAGE3,
    DECODE (AF.REVIEWSTATE3, 0, 1, 0) REVIEWSTATE3STAGE1,
    DECODE (AF.REVIEWSTATE3, 1, 1, 0) REVIEWSTATE3STAGE2,
    DECODE (AF.REVIEWSTATE3, 2, 1, 0) REVIEWSTATE3STAGE3,
    DECODE (AF.REVIEWSTATE4, 0, 1, 0) REVIEWSTATE4STAGE1,
    DECODE (AF.REVIEWSTATE4, 1, 1, 0) REVIEWSTATE4STAGE2,
    DECODE (AF.REVIEWSTATE4, 2, 1, 0) REVIEWSTATE4STAGE3,
    DECODE (AF.REVIEWSTATE5, 0, 1, 0) REVIEWSTATE5STAGE1,
    DECODE (AF.REVIEWSTATE5, 1, 1, 0) REVIEWSTATE5STAGE2,
    DECODE (AF.REVIEWSTATE5, 2, 1, 0) REVIEWSTATE5STAGE3,
    AF.REVIEWSTATE1,
    AF.REVIEWSTATE2,
    AF.REVIEWSTATE3,
    AF.REVIEWSTATE4,
    AF.REVIEWSTATE5,
    AF.REVIEWSTATE1DATECHANGED,
    AF.REVIEWSTATE2DATECHANGED,
    AF.REVIEWSTATE3DATECHANGED,
    AF.REVIEWSTATE4DATECHANGED,
    AF.REVIEWSTATE5DATECHANGED
FROM IRV_SV_ACTUAL_FORMS SVAF,
     IRV_SV_SUBJECTVISITS_EXPSTART SV,
     RT_ACTIVATED_FORMS AF,
     IRV_STUDYVERSION_FORMS SVF,
     IRV_FORM_REQITEMS FRI,
     IRV_IC_ROLLUP_FORMS RUF,
     (SELECT SUBJECTCHAPTERID,PAGEID,PAGEINDEX,PAGEREVISIONNUMBER, COUNT(*) AS FHREVS,MIN(PAGEHISTORYID) AS MINFORMHISTORYID,MIN(PAGEHISTORYREVISIONNUMBER) AS MINFORMHISTORYREV,
             MAX(PAGEHISTORYID) AS MAXFORMHISTORYID,MAX(PAGEHISTORYREVISIONNUMBER) AS MAXFORMHISTORYREV
      FROM PF_SVECPSTATEHISTORY
      GROUP BY SUBJECTCHAPTERID,PAGEID,PAGEINDEX, PAGEREVISIONNUMBER) FH,
     PF_SUBJECTVECHAPTER_CUR SVEC
WHERE
SVAF.SUBJECTID = AF.SUBJECTID (+)
AND SVAF.VISITID = AF.VISITID (+)
AND SVAF.VISITINDEX = AF.VISITINDEX (+)
AND SVAF.FORMID = AF.FORMID (+)
AND SVAF.FORMINDEX = AF.FORMINDEX (+)
AND SVAF.FORMREV = AF.FORMREV (+)
AND SVAF.SUBJECTVISITID = AF.SUBJECTVISITID (+)
AND SVAF.SUBJECTID = RUF.SUBJECTID (+)
AND SVAF.VISITID = RUF.VISITID (+)
AND SVAF.VISITINDEX = RUF.VISITINDEX (+)
AND SVAF.FORMID = RUF.FORMID (+)
AND SVAF.FORMINDEX = RUF.FORMINDEX (+)
AND SVAF.FORMREV = RUF.FORMREV (+)
AND SVAF.SUBJECTVISITID = RUF.SUBJECTVISITID (+)
AND SVAF.STUDYVERSIONID = SVF.STUDYVERSIONID (+)
AND SVAF.VISITID = SVF.VISITID (+)
AND SVAF.FORMID = SVF.FORMID (+)
AND SVAF.SUBJECTID = SV.SUBJECTID
AND SVAF.SITEID = SV.SITEID
AND SVAF.STUDYVERSIONID = SV.STUDYVERSIONID
AND SVAF.VISITID = SV.VISITID
AND (SVAF.VISITINDEX = 0 OR SVAF.VISITINDEX = SV.VISITINDEX )
AND SVAF.FORMID = FRI.FORMID
AND SVAF.FORMREV = FRI.FORMREV
AND (SVF.FORMTYPE NOT IN (4,5,6,7,8,103) OR SVF.FORMTYPE IS NULL)
AND (DELETEDDYNAMICFORMSTATE IS NULL OR DELETEDDYNAMICFORMSTATE = 0)
AND AF.SUBJECTVISITID = FH.SUBJECTCHAPTERID (+)
AND AF.FORMID = FH.PAGEID (+)
AND AF.FORMINDEX = FH.PAGEINDEX (+)
AND AF.FORMREV = FH.PAGEREVISIONNUMBER (+)
AND SV.SUBJECTVISITID = SVEC.SUBJECTCHAPTERID (+)
;

CREATE OR REPLACE VIEW IRV_AF_SUBJECT_FORMS
AS
SELECT 1 AS FORMCOUNT,
       AFSVF.SUBJECTID, SUBJECTSTATE,
       AFSVF.SITEID, SVF.STUDYID,
       AFSVF.STUDYVERSIONID, 
       AFSVF.VISITID,
       COALESCE(SVF.VISITREV,SV.VISITREV) AS VISITREV,
       VISITORDER,VISITTYPE,
       COALESCE(SV.VISITINDEX,AF.VISITINDEX,AFSVF.VISITINDEX) AS VISITINDEX,
       COALESCE(SV.SUBJECTVISITID,AF.SUBJECTVISITID) AS SUBJECTVISITID,
       COALESCE(SV.SUBJECTVISITREV,SVEC.SUBJECTCHAPTERREVISIONNUMBER) AS SUBJECTVISITREV,
       COALESCE(AFSVF.FORMID,AF.FORMID,SVF.FORMID) AS FORMID,
       COALESCE(AFSVF.FORMREV,AF.FORMREV,SVF.FORMREV) AS FORMREV,
       COALESCE(AF.FORMINDEX,AFSVF.FORMINDEX) AS FORMINDEX,
       INFORMACTIVATIONTIME,
       SV.DOV, DOVDTMASK,
       VISIT_FIRST_ENTRY,
       COALESCE(SV.DELETED,0) AS VISITDELETED,
       EXPECTEDSTARTDATE,
       FORMORDER,DYNAMICFORM AS FORMDYNAMIC,REPEATINGFORM AS FORMREPEATING,COMMONFORM AS FORMCOMMON,
       ALTFORM,EXPECTINGALTFORM,ALTFORMID,ALTFORMREV,
       HASREQUIREDITEMS, HASSDVREQUIREDITEMS,
       FH.FHREVS, FH.MINFORMHISTORYID, FH.MINFORMHISTORYREV, FH.MAXFORMHISTORYID, FH.MAXFORMHISTORYREV, 
       AF.HISTORICALORDER, AF.USERID, AF.PFTIMESTAMP AS FORMHISTORYTIME, AF.TRANSACTIONID, AF.REASON, 
       STATEHIST, ORIGINALSTATE, AF.ACTION, 
       STARTEDSTATE, FMINSTARTEDSTATE, FMAXSTARTEDSTATE, 
       SDVREADYSTATE, FMINSDVREADYSTATE, FMAXSDVREADYSTATE, 
       SDVPARTIALSTATE, FMINSDVPARTIALSTATE, FMAXSDVPARTIALSTATE, 
       SDVCOMPLETESTATE, FMINSDVCOMPLETESTATE, FMAXSDVCOMPLETESTATE, 
       LOCKEDSTATE, FMINLOCKEDSTATE, FMAXLOCKEDSTATE, 
       FROZENSTATE, FMINFROZENSTATE, FMAXFROZENSTATE, 
       SIGNEDSTATE, FMINSIGNEDSTATE, FMAXSIGNEDSTATE, 
       COMPLETESTATE, FMINCOMPLETESTATE, FMAXCOMPLETESTATE, 
       HASQUERIESSTATE, FMINHASQUERIESSTATE, FMAXHASQUERIESSTATE, 
       HASCOMMENTSSTATE, FMINHASCOMMENTSSTATE, FMAXHASCOMMENTSSTATE, 
       HASDATASTATE, FMINHASDATASTATE, FMAXHASDATASTATE, 
       MISSINGITEMSSTATE, FMINMISSINGITEMSSTATE, FMAXMISSINGITEMSSTATE, 
       NOTDONESTATE, FMINNOTDONESTATE, FMAXNOTDONESTATE, 
       DELETEDSTATE, FMINDELETEDSTATE, FMAXDELETEDSTATE, 
       DELETEDDYNAMICFORMSTATE, FMINDELETEDDYNAMICFORMSTATE, FMAXDELETEDDYNAMICFORMSTATE, 
       BOOKSIGN, FMINBOOKSIGN, FMAXBOOKSIGN, INFORMPARTIALURL_CRFVIEW,
       NVL2(SV.DOV,TRUNC(SYSDATE-SV.DOV,0),NULL) AS FDAYSSINCEDOV,
       NVL2(FMINSTARTEDSTATE,TRUNC(SYSDATE-FMINSTARTEDSTATE,0),NULL) AS FDAYSSINCESTART,
       NVL2(FMINSTARTEDSTATE,TRUNC(FMINSTARTEDSTATE-SV.DOV,0),NULL) AS FDAYSDOVTOSTART,
       NVL2(FMAXCOMPLETESTATE,TRUNC(FMAXCOMPLETESTATE-SV.DOV,0),NULL) AS FDAYSDOVTOCOMPLETE,
       NVL2(FMAXCOMPLETESTATE,TRUNC(FMAXCOMPLETESTATE-FMINSTARTEDSTATE,0),NULL) AS FDAYSSTARTTOCOMPLETE,
       NVL2(FMAXFROZENSTATE,TRUNC(FMAXFROZENSTATE-FMINCOMPLETESTATE,0),NULL) AS FDAYSCOMPLETETOFROZEN,
       NVL2(FMAXSDVREADYSTATE,TRUNC(FMAXSDVREADYSTATE-FMINCOMPLETESTATE,0),NULL) AS FDAYSCOMPLETETOSDVREADY,
       NVL2(FMAXSDVCOMPLETESTATE,TRUNC(FMAXSDVCOMPLETESTATE-FMINCOMPLETESTATE,0),NULL) AS FDAYSCOMPLETETOSDVCOMPLETE,
       NVL2(FMAXSIGNEDSTATE,TRUNC(FMAXSIGNEDSTATE-FMINCOMPLETESTATE,0),NULL) AS FDAYSCOMPLETETOSIGNED,
       NVL2(FMAXSDVCOMPLETESTATE,TRUNC(FMAXSDVCOMPLETESTATE-FMINSIGNEDSTATE,0),NULL) AS FDAYSSIGNTOSDVCOMPLETE,
       NVL2(FMAXSDVCOMPLETESTATE,TRUNC(FMAXSDVCOMPLETESTATE-FMINSDVREADYSTATE,0),NULL) AS FDAYSSDVREADYTOSDVCOMPLETE,
       NVL2(FMAXSDVCOMPLETESTATE,TRUNC(FMAXSDVCOMPLETESTATE-FMINFROZENSTATE,0),NULL) AS FDAYSFROZENTOSDVCOMPLETE,
       NVL2(FMAXSIGNEDSTATE,TRUNC(FMAXSIGNEDSTATE-FMINSDVCOMPLETESTATE,0),NULL) AS FDAYSSDVCOMPLETETOSIGN,
       NVL2(FMAXLOCKEDSTATE,TRUNC(FMAXLOCKEDSTATE-FMINSIGNEDSTATE,0),NULL) AS FDAYSSIGNTOLOCK,
       NVL2(FMAXLOCKEDSTATE,TRUNC(FMAXLOCKEDSTATE-FMINCOMPLETESTATE,0),NULL) AS FDAYSCOMPLETETOLOCK,
       LASTDATATIME,
       QUERIES, QTYPEAUTO, QTYPEMANUAL, QTYPECONFLICT, QREISSUED, QCANDIDATE, QOPENED, QANSWERED, QCLOSED, QDELETED, 
       CASE WHEN QANSWERED > 0
            THEN 1
            ELSE 0
       END AS HASANSWEREDQUERY,
       ITEMCOMMENTS, FORMCOMMENTS,
       CASE WHEN ITEMCOMMENTS > 0
            THEN 1
            ELSE 0
       END AS HASITEMCOMMENT
FROM IRV_AF_SVF AFSVF,
     IRV_SV_SUBJECTVISITS SV,
     RT_ACTIVATED_FORMS AF,
     IRV_STUDYVERSION_FORMS SVF,
     IRV_FORM_REQITEMS FRI,
     IRV_IC_ROLLUP_FORMS RUF,
     PF_SUBJECTVECHAPTER_CUR SVEC,
     (SELECT SUBJECTCHAPTERID,PAGEID,PAGEREVISIONNUMBER,PAGEINDEX,COUNT(*) AS FHREVS,MIN(PAGEHISTORYID) AS MINFORMHISTORYID,MIN(PAGEHISTORYREVISIONNUMBER) AS MINFORMHISTORYREV, 
             MAX(PAGEHISTORYID) AS MAXFORMHISTORYID,MAX(PAGEHISTORYREVISIONNUMBER) AS MAXFORMHISTORYREV
      FROM PF_SVECPSTATEHISTORY 
      GROUP BY SUBJECTCHAPTERID,PAGEID,PAGEREVISIONNUMBER,PAGEINDEX) FH
WHERE 
AFSVF.SUBJECTID = AF.SUBJECTID (+)
AND AFSVF.VISITID = AF.VISITID (+)
AND AFSVF.VISITINDEX = AF.VISITINDEX (+)
AND AFSVF.FORMID = AF.FORMID (+)
AND AFSVF.FORMINDEX = AF.FORMINDEX (+)
AND AFSVF.FORMREV = AF.FORMREV (+)
AND AFSVF.SUBJECTID = RUF.SUBJECTID (+)
AND AFSVF.VISITID = RUF.VISITID (+)
AND AFSVF.VISITINDEX = RUF.VISITINDEX (+)
AND AFSVF.FORMID = RUF.FORMID (+)
AND AFSVF.FORMINDEX = RUF.FORMINDEX (+)
AND AFSVF.FORMREV = RUF.FORMREV (+)
AND AFSVF.STUDYVERSIONID = SVF.STUDYVERSIONID (+)
AND AFSVF.VISITID = SVF.VISITID (+)
AND AFSVF.FORMID = SVF.FORMID (+)
AND AFSVF.SUBJECTID = SV.SUBJECTID
AND AFSVF.SITEID = SV.SITEID
AND AFSVF.STUDYVERSIONID = SV.STUDYVERSIONID
AND AFSVF.VISITID = SV.VISITID
AND AFSVF.VISITINDEX = SV.VISITINDEX
AND SV.VISITINDEX > 0
AND AFSVF.FORMID = FRI.FORMID
AND AFSVF.FORMREV = FRI.FORMREV
AND (SVF.FORMTYPE NOT IN (4,5,6,7,8,103) OR SVF.FORMTYPE IS NULL)
AND (DELETEDDYNAMICFORMSTATE IS NULL OR DELETEDDYNAMICFORMSTATE = 0)
AND AF.SUBJECTVISITID = FH.SUBJECTCHAPTERID (+)
AND AF.FORMID = FH.PAGEID (+)
AND AF.FORMINDEX = FH.PAGEINDEX (+)
AND AF.FORMREV = FH.PAGEREVISIONNUMBER (+)
AND SV.SUBJECTVISITID = SVEC.SUBJECTCHAPTERID (+);

--SUPPORT VIEW
CREATE OR REPLACE VIEW IRV_ITEMSTATE_REVS
AS
SELECT 
       ISR.CONTEXTID, CONTEXTREVISIONNUMBER AS CONTEXTREV, 
       DECODE(CONTEXTREVISIONNUMBER,MINCONTEXTREV,1,0) AS FIRSTCONTEXTREV,
       DECODE(CONTEXTREVISIONNUMBER,MAXCONTEXTREV,1,0) AS CURRENTCONTEXTREV,
       HISTORICALORDER, USERID, PFTIMESTAMP, TRANSACTIONID, REASON,
       AUDITORDER, ACTION, 
       STATEHIST, 
       DECODE(BITAND(STATEHIST,1),1,1,0) AS ITEMDELETED,
       DECODE(BITAND(STATEHIST,2),2,1,0) AS ITEMSDVED,
       STATE AS STATEBIT, BSET AS BITSET
FROM (SELECT CONTEXTID,COUNT(*) AS IHREVS,MIN(CONTEXTREVISIONNUMBER) AS MINCONTEXTREV,MAX(CONTEXTREVISIONNUMBER) AS MAXCONTEXTREV 
      FROM PF_CONTEXTSTATEHISTORY GROUP BY CONTEXTID) CIS,
     PF_CONTEXTSTATEHISTORY ISR,
     PF_REVISIONHISTORY RH
WHERE CIS.CONTEXTID = ISR.CONTEXTID
AND ISR.CONTEXTID = DBUID
AND ISR.CONTEXTREVISIONNUMBER = REVISIONNUMBER;

CREATE OR REPLACE VIEW IRV_ITEM_SDV
AS
SELECT CONTEXTID,
       COUNT(*) AS COUNTISREVS,
       COUNT(PFTIMESTAMP) AS COUNTISTIMES,
       MIN(DECODE(DECODE(STATEBIT,2,DECODE(BITSET,1,1,0),0),1,PFTIMESTAMP,NULL)) AS ITEMFIRSTSDV, 
       MAX(DECODE(DECODE(STATEBIT,2,DECODE(BITSET,1,1,0),0),1,PFTIMESTAMP,NULL)) AS ITEMLASTSDV
FROM IRV_ITEMSTATE_REVS ISR
GROUP BY CONTEXTID;

CREATE OR REPLACE VIEW IRV_FORM_ITEMS AS
  SELECT 1 AS ITEMCOUNT,
    --FI.STUDYID,
    FI.STUDYVERSIONID,
    FI.CONTEXTID,
    FI.SUBJECTID,
    FI.SITEID,
    FI.SUBJECTVISITID,
    FI.VISITID,
    VISITREV,
    FI.VISITINDEX,
    FI.FORMID,
    FI.FORMREV,
    FI.FORMINDEX,
    SECTIONORDER AS FORMSECTIONORDER,
    FI.SECTIONID,
    SECTIONREV,
    SECTIONITEMORDER,
    FI.ITEMSETID,
    ITEMSETREV,
    FI.ITEMSETINDEX,  
    (case when FI.ITEMSETID is NULL then to_number(null) 
    else DENSE_RANK() OVER (PARTITION BY FI.SUBJECTID, FI.VISITID, FI.VISITINDEX, FI.FORMID, FI.FORMINDEX, FI.SECTIONID, FI.ITEMSETID ORDER BY FI.ITEMSETINDEX asc) end ) AS ITEMSETINDEXORDINAL,
    ITEMSETITEMORDER,
    FI.ITEMID,
    ITEMREV,
    --
    AF.INFORMPARTIALURL_CRFVIEW,
    --
    SECTIONITEM,
    ITEMSETITEM,
    IHREVS,
    MINCONTEXTREV,
    MAXCONTEXTREV,
    STATEUSERID,
    STATETIME,
    STATETRANSACTIONID,
    STATEREASON,
    ITEMDELETED,
    ITEMSDVED,
    SDVSELECTEDSTATE,
    --
    (
    SELECT ITEMFIRSTSDV
    FROM IRV_ITEM_SDV IFSDV
    WHERE FI.CONTEXTID = IFSDV.CONTEXTID
    ) AS ITEMFIRSTSDV,
    (SELECT ITEMLASTSDV
    FROM IRV_ITEM_SDV IFSDV
    WHERE FI.CONTEXTID = IFSDV.CONTEXTID
    ) AS SDVTIME,
    --
    IDREVS,
    MAXAUDITORDER,
    DATAUSERID,
    DATATIME,
    DATATRANSACTIONID,
    DATAREASON,
    --
    (
    SELECT MINENTEREDDATE
    FROM RV_DIM_ITEMDATA DID
    WHERE FI.CONTEXTID = DID.CONTEXTID
    ) AS ITEMFIRSTDATA,
    --
    DECODE(QUERIES,NULL,0,1) AS ITEMHASQUERIES,
    QUERIES,
    QTYPEAUTO,
    QTYPEMANUAL,
    QTYPECONFLICT,
    QREISSUED,
    QCANDIDATE,
    QOPENED,
    QANSWERED,
    QCLOSED,
    QDELETED,
    DECODE(ITEMCOMMENTS,NULL,0,1) AS ITEMHASCOMMENTS,
    ITEMCOMMENTS,
    CONTROLS,
    CONTROLSWITHDATA,
    DECODE(CONTROLSWITHDATA,0,1,0) AS ITEMEMPTY,
    (SELECT NOTDONE FROM RV_ITEM_NOTDONE ND WHERE FI.CONTEXTID = ND.CONTEXTID
    ) AS NOTDONE,
    (SELECT NOTDONEREASON
    FROM RV_ITEM_NOTDONE ND
    WHERE FI.CONTEXTID = ND.CONTEXTID
    ) AS NOTDONEREASON,
    FI.ITEMSDVCRITICAL,
    FI.ITEMSDVOVERRIDE, 
    FI.ITEMSDVSELECTED,
    FI.BLANK
  FROM IRV_IC_FORMITEMS FI,
    RT_ACTIVATED_FORMS AF
  WHERE FI.SUBJECTID            = AF.SUBJECTID
  AND FI.VISITID                = AF.VISITID
  AND FI.VISITINDEX             = AF.VISITINDEX
  AND FI.FORMID                 = AF.FORMID
  AND FI.FORMINDEX              = AF.FORMINDEX
  AND FI.FORMREV                = AF.FORMREV
  AND ITEMSETITEM              <> 1
  AND (VISITDELETED            IS NULL
  OR VISITDELETED               = 0)
  AND FORMTYPE NOT             IN (4,5,6,7,8,103)
  AND (DELETEDDYNAMICFORMSTATE IS NULL
  OR DELETEDDYNAMICFORMSTATE    = 0)
  UNION ALL
  SELECT 1 AS ITEMCOUNT,
    --FI.STUDYID,
    FI.STUDYVERSIONID,
    FI.CONTEXTID,
    FI.SUBJECTID,
    FI.SITEID,
    FI.SUBJECTVISITID,
    FI.VISITID,
    VISITREV,
    FI.VISITINDEX,
    FI.FORMID,
    FI.FORMREV,
    FI.FORMINDEX,
    SECTIONORDER AS FORMSECTIONORDER,
    FI.SECTIONID,
    SECTIONREV,
    SECTIONITEMORDER,
    FI.ITEMSETID,
    ITEMSETREV,
    FI.ITEMSETINDEX,  
    (case when FI.ITEMSETID is NULL then to_number(null) 
    else DENSE_RANK() OVER (PARTITION BY FI.SUBJECTID, FI.VISITID, FI.VISITINDEX, FI.FORMID, FI.FORMINDEX, FI.SECTIONID, FI.ITEMSETID ORDER BY FI.ITEMSETINDEX asc) end ) AS ITEMSETINDEXORDINAL,
    ITEMSETITEMORDER,
    FI.ITEMID,
    ITEMREV,
    --
    AF.INFORMPARTIALURL_CRFVIEW,
    --
    SECTIONITEM,
    ITEMSETITEM,
    IHREVS,
    MINCONTEXTREV,
    MAXCONTEXTREV,
    STATEUSERID,
    STATETIME,
    STATETRANSACTIONID,
    STATEREASON,
    ITEMDELETED,
    ITEMSDVED,
    SDVSELECTEDSTATE,
    --
    ISD.ITEMFIRSTSDV AS ITEMFIRSTSDV,
    ISD.ITEMLASTSDV  AS SDVTIME,
    --
    IDREVS,
    MAXAUDITORDER,
    DATAUSERID,
    DATATIME,
    DATATRANSACTIONID,
    DATAREASON,
    --
    (
    SELECT MINENTEREDDATE
    FROM RV_DIM_ITEMDATA DID
    WHERE FI.CONTEXTID = DID.CONTEXTID
    ) AS ITEMFIRSTDATA,
    --
    DECODE(QUERIES,NULL,0,1) AS ITEMHASQUERIES,
    QUERIES,
    QTYPEAUTO,
    QTYPEMANUAL,
    QTYPECONFLICT,
    QREISSUED,
    QCANDIDATE,
    QOPENED,
    QANSWERED,
    QCLOSED,
    QDELETED,
    DECODE(ITEMCOMMENTS,NULL,0,1) AS ITEMHASCOMMENTS,
    ITEMCOMMENTS,
    CONTROLS,
    CONTROLSWITHDATA,
    DECODE(CONTROLSWITHDATA,0,1,0) AS ITEMEMPTY,
    (SELECT NOTDONE FROM RV_ITEM_NOTDONE ND WHERE FI.CONTEXTID = ND.CONTEXTID
    ) AS NOTDONE,
    (SELECT NOTDONEREASON
    FROM RV_ITEM_NOTDONE ND
    WHERE FI.CONTEXTID = ND.CONTEXTID
    ) AS NOTDONEREASON,
    FI.ITEMSDVCRITICAL,
    FI.ITEMSDVOVERRIDE, 
    FI.ITEMSDVSELECTED,
    FI.BLANK
  FROM IRV_IC_FORMITEMS FI,
    RT_ACTIVATED_FORMS AF,
    PF_ITEMCONTEXT IC,
    IRV_ITEM_SDV ISD
  WHERE FI.SUBJECTID            = AF.SUBJECTID
  AND FI.VISITID                = AF.VISITID
  AND FI.VISITINDEX             = AF.VISITINDEX
  AND FI.FORMID                 = AF.FORMID
  AND FI.FORMINDEX              = AF.FORMINDEX
  AND FI.FORMREV                = AF.FORMREV
  AND ITEMSETITEM               = 1
  AND (VISITDELETED            IS NULL
  OR VISITDELETED               = 0)
  AND FORMTYPE NOT             IN (4,5,6,7,8,103)
  AND (DELETEDDYNAMICFORMSTATE IS NULL
  OR DELETEDDYNAMICFORMSTATE    = 0)
  AND FI.SUBJECTID              =IC.SUBJECTKEYID
  AND FI.VISITID                =IC.CHAPTERID
  AND FI.VISITINDEX             =IC.CHAPTERINDEX
  AND FI.FORMID                 = IC.PAGEID
  AND FI.FORMINDEX              = IC.PAGEINDEX
  AND FI.FORMREV                = IC.PAGEREVISIONNUMBER
  AND FI.SECTIONID              = IC.SECTIONID
  AND FI.ITEMSETID              = IC.ITEMID
  AND FI.ITEMSETINDEX           =IC.SETITEMORDER
  AND IC.CONTEXTID              = ISD.CONTEXTID(+);
  

CREATE OR REPLACE VIEW IRV_CRF_STATUS_REPORT
AS
SELECT F.INFORMPARTIALURL_CRFVIEW,
       --F.STUDYID,
       F.STUDYVERSIONID,F.SUBJECTID,F.SITEID,F.VISITID,F.VISITREV,F.VISITORDER,F.VISITTYPE,F.VISITINDEX,
       F.FORMID,F.FORMREV,F.FORMINDEX,F.INFORMACTIVATIONTIME,
       SUBSTR(S.SITENAME,1,80) AS SITENAME,
       SUBSTR(S.SITEMNEMONIC,1,10) AS SITEMNEMONIC,
       SUBSTR(NVL2(S.SITECOUNTRY,SITECOUNTRY,'Not Specified'),1,80) AS SITECOUNTRY,
       SUBSTR(ST.SUBJECTNUMBERSTR,1,20) AS SUBJECTNUMBERSTR,
       ST.SUBJECTENROLLED AS SUBJECTENROLLED,
       ST.SUBJECTEVERENROLLED AS SUBJECTEVERENROLLED,
       ST.SUBJECTRANDOMIZED AS SUBJECTRANDOMIZED,
       ST.SUBJECTEVERRANDOMIZED AS SUBJECTEVERRANDOMIZED,
       ST.SUBJECTCOMPLETED AS SUBJECTCOMPLETED,
       ST.SUBJECTEVERCOMPLETED AS SUBJECTEVERCOMPLETED,
       ST.SUBJECTINCOMPLETE AS SUBJECTINCOMPLETE,
       ST.SUBJECTEVERINCOMPLETE AS SUBJECTEVERINCOMPLETE,
       CASE F.SUBJECTSTATE 
            WHEN 1 THEN 'Screened'
            WHEN 2 THEN 'Screening Failure'
            WHEN 3 THEN 'Enrollment Failure'
            WHEN 4 THEN 'Enrolled'
            WHEN 5 THEN 'Randomized'
            WHEN 6 THEN 'Completed'
            WHEN 7 THEN 'Dropped Out'
       END AS SUBJECTSTATE, 
       VR.VISITREFNAME AS VISITREFNAME,
       SUBSTR(VR.VISITNAME,1,50) AS VISITNAME,
       SUBSTR(VR.VISITMNEMONIC,1,10) AS VISITMNEMONIC,
       F.EXPECTEDSTARTDATE,
       F.VISIT_FIRST_ENTRY,
       F.DOV, F.DOVDTMASK,
       FR.FORMREFNAME AS FORMREFNAME,
       SUBSTR(FR.FORMNAME,1,50) AS FORMNAME,
       SUBSTR(FR.FORMMNEMONIC,1,10) AS FORMMNEMONIC,
       F.FORMORDER,
--       NVL2(AFROWID,1,0) AS ACTUALFORM,
       F.EXPECTEDFORM,
       F.HASREQUIREDITEMS,
       F.HASSDVREQUIREDITEMS, 
       F.FMINSTARTEDSTATE AS STARTEDDATE,
       F.STARTEDSTATE,
       F.SDVREADYSTATE,
       F.SDVPARTIALSTATE,
       F.SDVCOMPLETESTATE,
       F.LOCKEDSTATE,
       F.FROZENSTATE,
       F.SIGNEDSTATE,
       F.COMPLETESTATE,
       F.HASDATASTATE,
       F.MISSINGITEMSSTATE,
       F.NOTDONESTATE,
       F.DELETEDSTATE,
       F.BOOKSIGN,
       F.HASQUERIESSTATE,
       F.HASCOMMENTSSTATE,
       F.QUERIES AS QUERYCOUNT,
       F.QTYPEAUTO,
       F.QTYPEMANUAL,
       F.QTYPECONFLICT,
       F.QREISSUED,
       F.QCANDIDATE,
       F.QOPENED,
       F.QANSWERED,
       F.QCLOSED,
       F.QDELETED,
       (FORMCOMMENTS + ITEMCOMMENTS) AS COMMENTCOUNT,
       ITEMCOMMENTS AS CITEMCOMMENT, 
       FORMCOMMENTS AS CFORMCOMMENT
FROM IRV_SV_SUBJECT_FORMS F, RT_SITE S, RT_SUBJECT ST, RT_VISIT_REVS VR, RT_FORM_REVS FR
WHERE F.SITEID = S.SITEID
AND F.SUBJECTID = ST.SUBJECTID
AND F.VISITID = VR.VISITID
AND F.FORMID = FR.FORMID AND F.FORMREV = FR.FORMREV;

--IRV_REFRESH

--IRV_REFRESH

CREATE OR REPLACE VIEW IRV_REFRESH
AS 
SELECT LAST_REFRESH, LAST_TRANSACTION FROM
(select to_date(updatedatetime,'YYYYMMDD HH24:MI:SS') LAST_REFRESH from PF_HEARTBEAT) T1, 
(select MAX(PFTIMESTAMP) LAST_TRANSACTION from PF_TRANSACTIONHISTORY) T2;


--IRV_USER_BLINDED_ITEMS

CREATE OR REPLACE VIEW IRV_USER_BLINDED_ITEMS
AS
--SELECT USERNAME,IDB.ITEMID,ITEMREV,COALESCE(RIGHTSGROUPBLINDED,DEFAULTBLINDED) AS ITEMBLINDED
SELECT USERNAME,IDB.ITEMID,ITEMREV,DECODE(RIGHTSGROUPBLINDED, NULL, DEFAULTBLINDED, -1, DEFAULTBLINDED, 1, 1, 0, 0) AS ITEMBLINDED
FROM IRV_ITEM_DEFAULTBLIND IDB,
     IRV_BLINDING_OVERRIDES RBI
WHERE GROUPID = RIGHTSGROUPID (+)
AND IDB.ITEMID = RBI.ITEMID (+);


--IRV_USER_STATUS_CHANGES

CREATE OR REPLACE FORCE VIEW IRV_USER_STATUS_CHANGES 
AS
SELECT UPR.USERID, UPR.USERREV,FIRSTREV, CURRENTREV, 
  CASE ATTRIBUTENAME 
    WHEN 'UserActiveState' THEN DECODE(NUMVALUE, 1, 'User activated', 0, 'User deactivated')
    WHEN 'UserDeleteState' THEN DECODE(NUMVALUE, 1, 'User terminated', 0, DECODE(INSTR(ENTEREDREASON,'Create user',1),1,'User created','User reinstated'))
  END AS STATUS,
U.USERID AS ENTEREDUSERID, SUBSTR(U.USERNAME,1,32) AS ENTEREDUSERNAME,
ENTEREDDATE AS ENTEREDDATE, ENTEREDREASON
FROM RV_USER_PROPERTIES_REVS UPR,
     RT_USER U
WHERE (ATTRIBUTENAME = 'UserActiveState' OR ATTRIBUTENAME = 'UserDeleteState')
AND U.USERID = ENTEREDBY;

--IRV_USERLIST_REVS 

CREATE OR REPLACE FORCE VIEW IRV_USERLIST_REVS 
AS 
SELECT UL.ROWID ULROWID, G.ROWID GROWID, TT.ROWID TTROWID,
     UL.GROUPID,
     G.GROUPNAME,
     TYPEDESCRIPTION AS GROUPTYPE,
      UL.USERID,
      UL.USERLISTREVISIONNUMBER as USERLISTREV,
      ISMEMBEROF, RH.KEYID,
      RH.PFTIMESTAMP AS ENTEREDDATE, RH.REASON AS ENTEREDREASON, RH.USERID AS ENTEREDUSERID, US.USERNAME AS ENTEREDUSERNAME, RH.HISTORICALORDER
FROM PF_USERLIST UL,
     PF_GROUP G,
     PF_THINGTYPE TT, 
     PF_REVISIONHISTORY RH, 
     PF_USER US
WHERE G.GROUPID = UL.GROUPID
AND TT.TYPENAME = G.GROUPTYPENAME
AND UL.USERID = TO_NUMBER(SUBSTR(RH.KEYID,4,INSTR(RH.KEYID,' ',4)-4))
AND UL.USERLISTREVISIONNUMBER = TO_NUMBER(SUBSTR(RH.KEYID, INSTR(RH.KEYID,' ',4)))
AND RH.KEYID LIKE '72 %'
AND RH.USERID = US.USERID;

--IRV_USER_HISTORICAL_CHANGES

CREATE OR REPLACE FORCE VIEW IRV_USER_HISTORICAL_CHANGES 
AS
SELECT USERID, 'Group change' AS CHANGETYPE, DECODE(ISMEMBEROF, 1, 'Added to group', 0, 'Removed from group') CHANGETYPEDESCRIPTION,  
ENTEREDDATE, ENTEREDUSERID, ENTEREDUSERNAME, ENTEREDREASON,  GROUPID, GROUPNAME, GROUPTYPE, HISTORICALORDER FROM IRV_USERLIST_REVS
UNION
SELECT USERID, 'Status change' AS CHANGETYPE, STATUS, ENTEREDDATE, ENTEREDUSERID, ENTEREDUSERNAME, ENTEREDREASON, null, null, null, null FROM IRV_USER_STATUS_CHANGES;

--IRV_FORM_ASSOC_TEMP

CREATE OR REPLACE VIEW IRV_FORM_ASSOC_TEMP
AS
SELECT
FA.SUBJECTID,
SUB.SITEID,
FA.VISITID,
FA.VISITINDEX,
FA.FORMID,
FA.FORMINDEX,
FA.FORMASSOCID,
FA.FORMASSOCREV,
FA.STATUS
FROM
(SELECT PA.PAGEASSOCID AS FORMASSOCID,
        PA.PAGEASSOCREVISIONNUMBER AS FORMASSOCREV,
        PAP.PAGEID AS FORMID,
        PAP.PAGEINDEX AS FORMINDEX,
        PAP.CHAPTERID AS VISITID,
        PAP.CHAPTERINDEX AS VISITINDEX,  
        PA.SUBJECTKEYID AS SUBJECTID,
        PA.STATUS AS STATUS
FROM PF_PAGEASSOC PA, PF_PAGEASSOCPAGE PAP
WHERE PA.PAGEASSOCID=PAP.PAGEASSOCID
AND PA.PAGEASSOCREVISIONNUMBER=(select MAX(PAGEASSOCREVISIONNUMBER) FROM PF_PAGEASSOC WHERE PAGEASSOCID=PA.PAGEASSOCID)
AND PA.PAGEASSOCREVISIONNUMBER=PAP.PAGEASSOCREVISIONNUMBER AND PA.STATUS=0)FA, IRV_CUR_SUBJECT SUB
where FA.SUBJECTID=SUB.SUBJECTID;

--IRV_FORM_ASSOC

CREATE OR REPLACE VIEW IRV_FORM_ASSOC
AS
SELECT
A.SUBJECTID AS SUBJECTID,
A.SITEID AS SITEID,
A.VISITID AS VISITID,
A.VISITINDEX AS VISITINDEX,
A.STATUS AS STATUS,
A.FORMASSOCID AS FORMASSOCID,
A.FORMID AS FORMID,
A.FORMINDEX AS FORMINDEX,
B.FORMID AS ASSOCFORMID,
B.FORMINDEX AS ASSOCFORMINDEX
FROM IRV_FORM_ASSOC_TEMP A, IRV_FORM_ASSOC_TEMP B
WHERE
A.FORMASSOCID=B.FORMASSOCID
AND A.FORMASSOCREV=B.FORMASSOCREV
AND A.VISITID = B.VISITID
AND A.VISITINDEX = B.VISITINDEX
AND A.SUBJECTID = B.SUBJECTID
AND A.SITEID = B.SITEID
AND A.STATUS = B.STATUS
AND A.FORMID < B.FORMID;

--Build IRVs from RVs

Create or Replace View IRV_SUBJECT_REV_SUMM as Select * from RV_SUBJECT_REV_SUMM;

Create or Replace View IRV_SUBJECT_REVS as Select * from RV_SUBJECT_REVS;

prompt Run fnc_get_audit_*.sql to create functions 
@fnc_get_audit_dt_components.sql
@fnc_get_audit_record.sql


create or replace VIEW IRV_ITEM_CONTROL_NESTING as
select it.itemid  ,
       it.itemrevisionnumber ,
       it.itemrefname ,
       it.itemquestion,
       gc2.childcontrolid controlid,
       gc2.childrevisionnumber controlrevisionnumber,
       c.controlrefname
from (SELECT
	  connect_by_root gc.groupcontrolid       GroupControlId           ,
	  connect_by_root gc.grouprevisionnumber GroupRevisionNumber ,
	  gc.childcontrolid                                  ,
	  gc.childrevisionnumber                                   ,
	  gc.ChildControlOrder                                    ,
	  gc.selectionvalue
	   FROM pf_groupcontrol gc START
	  WITH gc.groupcontrolid IN
	  (SELECT i2.controlid
	     FROM pf_item i2,
	          pf_control c2
	    WHERE i2.controlid           = c2.controlid
	  AND i2.controlrevisionnumber   = c2.controlrevisionnumber
	  ) CONNECT BY gc.groupcontrolid = prior gc. childcontrolid
	  AND gc.grouprevisionnumber       = prior gc.childrevisionnumber
     ) gc2,
     pf_item it,
     pf_control c
where it.controlid  = gc2.groupcontrolid
  and it.controlrevisionnumber  = gc2.grouprevisionnumber
  and c.controlid = gc2.childcontrolid
  and c.controlrevisionnumber  = gc2.childrevisionnumber
union all
select i3.itemid ,
       i3.itemrevisionnumber ,
       i3.itemrefname,
       i3.itemquestion , 
       i3.controlid ,
       i3.controlrevisionnumber ,
       c.controlrefname
from pf_item i3,
pf_control c
where i3.controlid = c.controlid and i3.controlrevisionnumber = c.controlrevisionnumber;

-- Build IRV_USER_VIEWREVIEWSTATES

CREATE OR REPLACE VIEW IRV_USER_VIEWREVIEWSTATES
AS
  SELECT u.username,
    1 AS viewreveiwstates
  FROM rv_user_rights ur,
    pf_user u
  WHERE ur.userid=u.userid
  AND rightnumber=68;